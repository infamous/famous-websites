var __searchIndexData = {"index":{"searchIndex":["align","tostring","constructor","update","onupdate","camera","tostring","getvalue","setvalue","set","setdepth","setfrustum","setflat","onupdate","ontransformchange","gesturehandler","onreceive","tostring","on","triggergestures","trigger","mountpoint","tostring","constructor","update","onupdate","opacity","tostring","getvalue","setvalue","set","get","halt","isactive","update","onupdate","origin","tostring","constructor","update","onupdate","position","tostring","getvalue","setvalue","getx","gety","getz","isactive","_checkupdate","update","onupdate","setx","sety","setz","set","halt","rotation","tostring","constructor","update","onupdate","scale","tostring","constructor","update","onupdate","size","setmode","tostring","getvalue","setvalue","_isactive","isactive","onupdate","setabsolute","setproportional","setdifferential","get","halt","tostring","getvalue","setstate","setorigin","setmountpoint","setalign","setscale","setposition","translate","setrotation","rotate","clean","onupdate","channel","_enterworkermode","onmessage","sendmessage","onmessage","clock","_time","_frame","_timerqueue","_updatingindex","_scale","_scaledtime","setscale","getscale","step","now","gettime","getframe","settimeout","setinterval","cleartimer","dispatch","_nodes","_queue","_setupdater","addchildrentoqueue","next","breadthfirstnext","mount","dismount","getnode","show","hide","lookupnode","dispatch","dispatchuievent","event","famousengine","_updatequeue","_nextupdatequeue","_scenes","_messages","_inupdate","_clock","_channel","init","setchannel","getchannel","_update","requestupdate","requestupdateonnexttick","handlemessage","handlewith","handleframe","step","getcontext","getclock","message","createscene","addscene","removescene","startrenderloop","stoprenderloop","startengine","stopengine","node","_requestingupdate","_inupdate","_mounted","_shown","_updater","_opacity","_uievents","_updatequeue","_nextupdatequeue","_freedcomponentindicies","_components","_freedchildindicies","_children","_parent","_id","_transformid","_sizeid","_init","_setparent","_setmounted","_setshown","_setupdater","getlocation","emit","senddrawcommand","getvalue","getcomputedvalue","getchildren","getparent","requestupdate","requestupdateonnexttick","ismounted","isshown","getopacity","getmountpoint","getalign","getorigin","getposition","getrotation","getscale","getsizemode","getproportionalsize","getdifferentialsize","getabsolutesize","getrendersize","getsize","gettransform","getuievents","addchild","removechild","addcomponent","getcomponent","removecomponent","removeuievent","adduievent","_requestupdate","_vecoptionalset","show","hide","setalign","setmountpoint","setorigin","setposition","setrotation","setscale","setopacity","setsizemode","setproportionalsize","setdifferentialsize","setabsolutesize","getframe","getcomponents","update","mount","dismount","pathstore","items","paths","memo","insert","remove","get","getitems","getpaths","scene","_globalupdater","_selector","constructor","getupdater","getselector","getdispatch","onreceive","mount","size","setparent","getparent","setsizemode","getsizemode","setabsolute","getabsolute","setproportional","getproportional","setdifferential","getdifferential","get","fromcomponents","sizesystem","pathstore","registersizeatpath","deregistersizeatpath","get","update","transform","reset","setparent","getparent","setbreakpoint","isbreakpoint","getlocaltransform","getworldtransform","calculate","getposition","setposition","getrotation","setrotation","getscale","setscale","getalign","setalign","getmountpoint","setmountpoint","getorigin","setorigin","calculateworldmatrix","registertransformatpath","deregistertransformatpath","makebreakpointat","get","onupdate","domelement","getvalue","onupdate","onmount","ondismount","onshow","onhide","setcutoutstate","ontransformchange","onsizechange","onopacitychange","onadduievent","onremoveuievent","_subscribe","preventdefault","allowdefault","_unsubscribe","onsizemodechange","getrendersize","_requestupdate","init","setid","addclass","removeclass","hasclass","setattribute","setproperty","setcontent","on","onreceive","draw","domrenderer","subscribe","unsubscribe","preventdefault","allowdefault","_listen","unsubscribe","_triggerevent","getsizeof","draw","_assertpathloaded","_assertparentloaded","_assertchildrenloaded","_asserttargetloaded","findparent","findtarget","loadpath","resolvechildren","insertel","setproperty","setsize","setwidth","setheight","setattribute","setcontent","setmatrix","addclass","removeclass","_stringifymatrix","elementcache","compositionevent","data","constructor","tostring","event","type","defaultprevented","timestamp","value","tostring","focusevent","constructor","tostring","inputevent","inputtype","data","iscomposing","targetrange","constructor","tostring","keyboardevent","dom_key_location_standard","dom_key_location_left","dom_key_location_right","dom_key_location_numpad","key","code","location","ctrlkey","shiftkey","altkey","metakey","repeat","iscomposing","keycode","constructor","tostring","screenx","screeny","clientx","clienty","ctrlkey","shiftkey","altkey","metakey","constructor","tostring","touchevent","touches","targettouches","changedtouches","altkey","metakey","ctrlkey","shiftkey","constructor","tostring","uievent","detail","constructor","tostring","wheelevent","dom_delta_pixel","dom_delta_line","dom_delta_page","deltax","deltay","deltaz","deltamode","constructor","tostring","mat33","get","set","copy","vectormultiply","multiply","transpose","getdeterminant","inverse","quaternion","multiply","leftmultiply","rotatevector","invert","conjugate","length","normalize","set","copy","clear","dot","slerp","tomatrix","toeuler","fromeuler","fromangleaxis","vec2","set","add","subtract","scale","rotate","dot","cross","invert","map","length","copy","clear","iszero","toarray","vec3","set","add","subtract","rotatex","rotatey","rotatez","dot","cross","scale","invert","map","length","lengthsq","copy","clear","iszero","toarray","normalize","applyrotation","applymatrix","physicsengine","on","off","trigger","setorigin","setorientation","add","remove","addbody","addforce","addconstraint","removebody","removeforce","removeconstraint","update","gettransform","box","constructor","particle","on","off","trigger","getrestrictions","setrestrictions","getmass","setmass","getinversemass","updatelocalinertia","updateinertia","getposition","setposition","getvelocity","setvelocity","getmomentum","setmomentum","getorientation","setorientation","getangularvelocity","setangularvelocity","getangularmomentum","setangularmomentum","getforce","setforce","gettorque","settorque","applyforce","applytorque","applyimpulse","applyangularimpulse","support","updateshape","sphere","constructor","getradius","setradius","updatelocalinertia","support","wall","constructor","angle","constructor","init","update","resolve","ballandsocket","constructor","init","update","resolve","collision","constructor","init","update","resolve","addtarget","removetarget","applynarrowphase","constraint","setoptions","init","update","resolve","curve","constructor","init","update","resolve","direction","constructor","init","update","resolve","distance","constructor","init","update","resolve","hinge","constructor","init","update","resolve","aabb","update","bruteforce","add","update","sweepandprune","add","remove","update","drag","constructor","init","update","force","setoptions","addtarget","removetarget","init","update","gravity1d","constructor","init","update","gravity3d","constructor","init","update","rotationaldrag","constructor","init","update","rotationalspring","constructor","init","update","spring","constructor","init","update","compositor","_contexts","_outcommands","_incommands","_time","_resized","onresize","gettime","sendevent","sendresize","handlewith","getorsetcontext","getcontext","drawcommands","updatesize","receivecommands","givesizefor","clearcommands","context","_compositor","_rootel","_selector","_selector","_webglrenderer","_domrenderer","_canvasel","_renderstate","_size","_meshtransform","_meshsize","_initdom","_commandcallbacks","updatesize","draw","_initdomrenderer","getrootsize","initcommandcallbacks","_initwebglrenderer","getrootsize","checkinit","receive","getdomrenderer","getwebglrenderer","uimanager","_thread","_compositor","_renderloop","getthread","getcompositor","getengine","getrenderloop","update","transitionable","_queue","_from","_state","_startedat","_pausedat","to","from","delay","override","_interpolate","_sync","get","isactive","halt","pause","ispaused","resume","reset","set","callbackstore","_events","on","off","trigger","color","_r","_g","_b","_opacity","tostring","set","isactive","halt","changeto","setcolor","getcolor","setr","setg","setb","setopacity","setrgb","getr","getg","getb","getopacity","getrgb","getnormalizedrgb","getnormalizedrgba","gethex","sethex","keycodes","dynamicgeometry","getvertexbuffer","setvertexbuffer","fromgeometry","setvertexpositions","setnormals","settexturecoords","setindices","setdrawtype","getvertexpositions","getnormals","gettexturecoords","geometry","options","default_buffer_size","spec","geometryhelper","circle","cylinder","geodesicsphere","icosahedron","parametriccone","plane","tetrahedron","torus","triangle","material","name","chunk","inputs","uniforms","varyings","attributes","texture","_id","invalidations","__isamaterial__","setuniform","mesh","_node","_changequeue","_initialized","_requestingupdate","_indraw","value","_id","setdrawoptions","getdrawoptions","setgeometry","getgeometry","setbasecolor","getbasecolor","setflatshading","getflatshading","setnormals","getnormals","setglossiness","getglossiness","setpositionoffset","getpositionoffset","getmaterialexpressions","getvalue","_pushinvalidations","onupdate","onmount","ondismount","onshow","onhide","ontransformchange","onsizechange","onopacitychange","onadduievent","_requestupdate","init","draw","ambientlight","constructor","light","_node","_requestingupdate","_color","queue","commands","_id","setcolor","getcolor","onupdate","pointlight","constructor","onmount","ontransformchange","buffer","buffer","target","type","data","gl","subdata","bufferregistry","gl","registry","_dynamicbuffers","_staticbuffers","_arraybuffermax","_elementbuffermax","allocate","program","gl","textureslots","options","registeredmaterials","flaggeduniforms","cacheduniforms","uniformtypes","definitionvec4","definitionvec3","definitionfloat","applicationvec3","applicationvec4","applicationfloat","applicationvert","definitionvert","registermaterial","resetprogram","uniformiscached","setuniforms","getuniformtypefromvalue","compileshader","texture","id","width","height","mipmap","format","type","gl","bind","unbind","setimage","setarray","readback","texturemanager","registry","_needsresample","_activetexture","_boundtexture","_checkerboard","gl","update","register","bindtexture","webglrenderer","canvas","compositor","gl","meshregistry","meshregistrykeys","cutoutregistry","cutoutregistrykeys","numlights","ambientlightcolor","lightregistry","lightregistrykeys","lightpositions","lightcolors","texturemanager","texcache","bufferregistry","program","state","resolutionname","resolutionvalues","cachedsize","projectiontransform","cutoutgeometry","getwebglcontext","createlight","createmesh","setcutoutstate","getorsetcutout","setmeshvisibility","removemesh","setcutoutuniform","setmeshoptions","setambientlightcolor","setlightposition","setlightcolor","handlematerialinput","setgeometry","setmeshuniform","bufferdata","draw","drawmeshes","drawcutouts","setglobaluniforms","drawbuffers","updatesize","handleoptions","resetoptions"],"longSearchIndex":["align","tostring","constructor","update","onupdate","camera","tostring","getvalue","setvalue","set","setdepth","setfrustum","setflat","onupdate","ontransformchange","gesturehandler","onreceive","tostring","on","triggergestures","trigger","mountpoint","tostring","constructor","update","onupdate","opacity","tostring","getvalue","setvalue","set","get","halt","isactive","update","onupdate","origin","tostring","constructor","update","onupdate","position","tostring","getvalue","setvalue","getx","gety","getz","isactive","_checkupdate","update","onupdate","setx","sety","setz","set","halt","rotation","tostring","constructor","update","onupdate","scale","tostring","constructor","update","onupdate","size","setmode","tostring","getvalue","setvalue","_isactive","isactive","onupdate","setabsolute","setproportional","setdifferential","get","halt","tostring","getvalue","setstate","setorigin","setmountpoint","setalign","setscale","setposition","translate","setrotation","rotate","clean","onupdate","channel","_enterworkermode","onmessage","sendmessage","onmessage","clock","_time","_frame","_timerqueue","_updatingindex","_scale","_scaledtime","setscale","getscale","step","now","gettime","getframe","settimeout","setinterval","cleartimer","dispatch","_nodes","_queue","_setupdater","addchildrentoqueue","next","breadthfirstnext","mount","dismount","getnode","show","hide","lookupnode","dispatch","dispatchuievent","event","famousengine","_updatequeue","_nextupdatequeue","_scenes","_messages","_inupdate","_clock","_channel","init","setchannel","getchannel","_update","requestupdate","requestupdateonnexttick","handlemessage","handlewith","handleframe","step","getcontext","getclock","message","createscene","addscene","removescene","startrenderloop","stoprenderloop","startengine","stopengine","node","_requestingupdate","_inupdate","_mounted","_shown","_updater","_opacity","_uievents","_updatequeue","_nextupdatequeue","_freedcomponentindicies","_components","_freedchildindicies","_children","_parent","_id","_transformid","_sizeid","_init","_setparent","_setmounted","_setshown","_setupdater","getlocation","emit","senddrawcommand","getvalue","getcomputedvalue","getchildren","getparent","requestupdate","requestupdateonnexttick","ismounted","isshown","getopacity","getmountpoint","getalign","getorigin","getposition","getrotation","getscale","getsizemode","getproportionalsize","getdifferentialsize","getabsolutesize","getrendersize","getsize","gettransform","getuievents","addchild","removechild","addcomponent","getcomponent","removecomponent","removeuievent","adduievent","_requestupdate","_vecoptionalset","show","hide","setalign","setmountpoint","setorigin","setposition","setrotation","setscale","setopacity","setsizemode","setproportionalsize","setdifferentialsize","setabsolutesize","getframe","getcomponents","update","mount","dismount","pathstore","items","paths","memo","insert","remove","get","getitems","getpaths","scene","_globalupdater","_selector","constructor","getupdater","getselector","getdispatch","onreceive","mount","size","setparent","getparent","setsizemode","getsizemode","setabsolute","getabsolute","setproportional","getproportional","setdifferential","getdifferential","get","fromcomponents","sizesystem","pathstore","registersizeatpath","deregistersizeatpath","get","update","transform","reset","setparent","getparent","setbreakpoint","isbreakpoint","getlocaltransform","getworldtransform","calculate","getposition","setposition","getrotation","setrotation","getscale","setscale","getalign","setalign","getmountpoint","setmountpoint","getorigin","setorigin","calculateworldmatrix","registertransformatpath","deregistertransformatpath","makebreakpointat","get","onupdate","domelement","getvalue","onupdate","onmount","ondismount","onshow","onhide","setcutoutstate","ontransformchange","onsizechange","onopacitychange","onadduievent","onremoveuievent","_subscribe","preventdefault","allowdefault","_unsubscribe","onsizemodechange","getrendersize","_requestupdate","init","setid","addclass","removeclass","hasclass","setattribute","setproperty","setcontent","on","onreceive","draw","domrenderer","subscribe","unsubscribe","preventdefault","allowdefault","_listen","unsubscribe","_triggerevent","getsizeof","draw","_assertpathloaded","_assertparentloaded","_assertchildrenloaded","_asserttargetloaded","findparent","findtarget","loadpath","resolvechildren","insertel","setproperty","setsize","setwidth","setheight","setattribute","setcontent","setmatrix","addclass","removeclass","_stringifymatrix","elementcache","compositionevent","data","constructor","tostring","event","type","defaultprevented","timestamp","value","tostring","focusevent","constructor","tostring","inputevent","inputtype","data","iscomposing","targetrange","constructor","tostring","keyboardevent","dom_key_location_standard","dom_key_location_left","dom_key_location_right","dom_key_location_numpad","key","code","location","ctrlkey","shiftkey","altkey","metakey","repeat","iscomposing","keycode","constructor","tostring","screenx","screeny","clientx","clienty","ctrlkey","shiftkey","altkey","metakey","constructor","tostring","touchevent","touches","targettouches","changedtouches","altkey","metakey","ctrlkey","shiftkey","constructor","tostring","uievent","detail","constructor","tostring","wheelevent","dom_delta_pixel","dom_delta_line","dom_delta_page","deltax","deltay","deltaz","deltamode","constructor","tostring","mat33","get","set","copy","vectormultiply","multiply","transpose","getdeterminant","inverse","quaternion","multiply","leftmultiply","rotatevector","invert","conjugate","length","normalize","set","copy","clear","dot","slerp","tomatrix","toeuler","fromeuler","fromangleaxis","vec2","set","add","subtract","scale","rotate","dot","cross","invert","map","length","copy","clear","iszero","toarray","vec3","set","add","subtract","rotatex","rotatey","rotatez","dot","cross","scale","invert","map","length","lengthsq","copy","clear","iszero","toarray","normalize","applyrotation","applymatrix","physicsengine","on","off","trigger","setorigin","setorientation","add","remove","addbody","addforce","addconstraint","removebody","removeforce","removeconstraint","update","gettransform","box","constructor","particle","on","off","trigger","getrestrictions","setrestrictions","getmass","setmass","getinversemass","updatelocalinertia","updateinertia","getposition","setposition","getvelocity","setvelocity","getmomentum","setmomentum","getorientation","setorientation","getangularvelocity","setangularvelocity","getangularmomentum","setangularmomentum","getforce","setforce","gettorque","settorque","applyforce","applytorque","applyimpulse","applyangularimpulse","support","updateshape","sphere","constructor","getradius","setradius","updatelocalinertia","support","wall","constructor","angle","constructor","init","update","resolve","ballandsocket","constructor","init","update","resolve","collision","constructor","init","update","resolve","addtarget","removetarget","applynarrowphase","constraint","setoptions","init","update","resolve","curve","constructor","init","update","resolve","direction","constructor","init","update","resolve","distance","constructor","init","update","resolve","hinge","constructor","init","update","resolve","aabb","update","bruteforce","add","update","sweepandprune","add","remove","update","drag","constructor","init","update","force","setoptions","addtarget","removetarget","init","update","gravity1d","constructor","init","update","gravity3d","constructor","init","update","rotationaldrag","constructor","init","update","rotationalspring","constructor","init","update","spring","constructor","init","update","compositor","_contexts","_outcommands","_incommands","_time","_resized","onresize","gettime","sendevent","sendresize","handlewith","getorsetcontext","getcontext","drawcommands","updatesize","receivecommands","givesizefor","clearcommands","context","_compositor","_rootel","_selector","_selector","_webglrenderer","_domrenderer","_canvasel","_renderstate","_size","_meshtransform","_meshsize","_initdom","_commandcallbacks","updatesize","draw","_initdomrenderer","getrootsize","initcommandcallbacks","_initwebglrenderer","getrootsize","checkinit","receive","getdomrenderer","getwebglrenderer","uimanager","_thread","_compositor","_renderloop","getthread","getcompositor","getengine","getrenderloop","update","transitionable","_queue","_from","_state","_startedat","_pausedat","to","from","delay","override","_interpolate","_sync","get","isactive","halt","pause","ispaused","resume","reset","set","callbackstore","_events","on","off","trigger","color","_r","_g","_b","_opacity","tostring","set","isactive","halt","changeto","setcolor","getcolor","setr","setg","setb","setopacity","setrgb","getr","getg","getb","getopacity","getrgb","getnormalizedrgb","getnormalizedrgba","gethex","sethex","keycodes","dynamicgeometry","getvertexbuffer","setvertexbuffer","fromgeometry","setvertexpositions","setnormals","settexturecoords","setindices","setdrawtype","getvertexpositions","getnormals","gettexturecoords","geometry","options","default_buffer_size","spec","geometryhelper","circle","cylinder","geodesicsphere","icosahedron","parametriccone","plane","tetrahedron","torus","triangle","material","name","chunk","inputs","uniforms","varyings","attributes","texture","_id","invalidations","__isamaterial__","setuniform","mesh","_node","_changequeue","_initialized","_requestingupdate","_indraw","value","_id","setdrawoptions","getdrawoptions","setgeometry","getgeometry","setbasecolor","getbasecolor","setflatshading","getflatshading","setnormals","getnormals","setglossiness","getglossiness","setpositionoffset","getpositionoffset","getmaterialexpressions","getvalue","_pushinvalidations","onupdate","onmount","ondismount","onshow","onhide","ontransformchange","onsizechange","onopacitychange","onadduievent","_requestupdate","init","draw","ambientlight","constructor","light","_node","_requestingupdate","_color","queue","commands","_id","setcolor","getcolor","onupdate","pointlight","constructor","onmount","ontransformchange","buffer","buffer","target","type","data","gl","subdata","bufferregistry","gl","registry","_dynamicbuffers","_staticbuffers","_arraybuffermax","_elementbuffermax","allocate","program","gl","textureslots","options","registeredmaterials","flaggeduniforms","cacheduniforms","uniformtypes","definitionvec4","definitionvec3","definitionfloat","applicationvec3","applicationvec4","applicationfloat","applicationvert","definitionvert","registermaterial","resetprogram","uniformiscached","setuniforms","getuniformtypefromvalue","compileshader","texture","id","width","height","mipmap","format","type","gl","bind","unbind","setimage","setarray","readback","texturemanager","registry","_needsresample","_activetexture","_boundtexture","_checkerboard","gl","update","register","bindtexture","webglrenderer","canvas","compositor","gl","meshregistry","meshregistrykeys","cutoutregistry","cutoutregistrykeys","numlights","ambientlightcolor","lightregistry","lightregistrykeys","lightpositions","lightcolors","texturemanager","texcache","bufferregistry","program","state","resolutionname","resolutionvalues","cachedsize","projectiontransform","cutoutgeometry","getwebglcontext","createlight","createmesh","setcutoutstate","getorsetcutout","setmeshvisibility","removemesh","setcutoutuniform","setmeshoptions","setambientlightcolor","setlightposition","setlightcolor","handlematerialinput","setgeometry","setmeshuniform","bufferdata","draw","drawmeshes","drawcutouts","setglobaluniforms","drawbuffers","updatesize","handleoptions","resetoptions"],"info":[["Align","Align","components/Align.html#Align","","<p>Align is a component designed to allow for smooth tweening\nof the alignment of a node relative to its parent.</p>"],["Align.prototype.toString","Align","components/Align.html#toString","()","<p>Return the name of the Align component</p>"],["Align.prototype.constructor","Align","components/Align.html#constructor","",""],["Align.prototype.update","Align","components/Align.html#update","()","<p>When the node this component is attached to updates, update the value\nof the Node's align.</p>"],["Align.prototype.onUpdate","Align","components/Align.html#onUpdate","",""],["Camera","Camera","components/Camera.html#Camera","","<p>Camera is a component that is responsible for sending information to the renderer about where\nthe camera is in the scene.  This allows the user to set the type of projection, the focal depth,\nand other properties to adjust the way the scenes are rendered.</p>"],["Camera.prototype.toString","Camera","components/Camera.html#toString","()",""],["Camera.prototype.getValue","Camera","components/Camera.html#getValue","()","<p>Gets object containing serialized data for the component</p>"],["Camera.prototype.setValue","Camera","components/Camera.html#setValue","(state)","<p>Set the components state based on some serialized data</p>"],["Camera.prototype.set","Camera","components/Camera.html#set","(type, depth, near, far)","<p>Set the internals of the component</p>"],["Camera.prototype.setDepth","Camera","components/Camera.html#setDepth","(depth)","<p>Set the camera depth for a pinhole projection model</p>"],["Camera.prototype.setFrustum","Camera","components/Camera.html#setFrustum","(near, far)","<p>Gets object containing serialized data for the component</p>"],["Camera.prototype.setFlat","Camera","components/Camera.html#setFlat","()","<p>Set the Camera to have orthographic projection</p>"],["Camera.prototype.onUpdate","Camera","components/Camera.html#onUpdate","()","<p>When the node this component is attached to updates, the Camera will\nsend new camera information to the Compositor to update the rendering\nof the scene.</p>"],["Camera.prototype.onTransformChange","Camera","components/Camera.html#onTransformChange","(transform)","<p>When the transform of the node this component is attached to\nchanges, have the Camera update its projection matrix and\nif needed, flag to node to update.</p>"],["GestureHandler","GestureHandler","components/GestureHandler.html#GestureHandler","","<p>Component to manage gesture events. Will track 'pinch', 'rotate', 'tap', and 'drag' events, on an\nas-requested basis.</p>"],["GestureHandler.prototype.onReceive","GestureHandler","components/GestureHandler.html#onReceive","(ev, payload)","<p>onReceive fires when the node this component is attached to gets an event.</p>"],["GestureHandler.prototype.toString","GestureHandler","components/GestureHandler.html#toString","()","<p>Return the name of the GestureHandler component</p>"],["GestureHandler.prototype.on","GestureHandler","components/GestureHandler.html#on","(ev, cb)","<p>Register a callback to be invoked on an event.</p>"],["GestureHandler.prototype.triggerGestures","GestureHandler","components/GestureHandler.html#triggerGestures","()","<p>Trigger gestures in the order they were requested, if they occurred.</p>"],["GestureHandler.prototype.trigger","GestureHandler","components/GestureHandler.html#trigger","()",""],["MountPoint","MountPoint","components/MountPoint.html#MountPoint","","<p>MountPoint is a component designed to allow for smooth tweening\nof where on the Node it is attached to the parent.</p>"],["MountPoint.prototype.toString","MountPoint","components/MountPoint.html#toString","()","<p>Return the name of the MountPoint component</p>"],["MountPoint.prototype.constructor","MountPoint","components/MountPoint.html#constructor","",""],["MountPoint.prototype.update","MountPoint","components/MountPoint.html#update","()","<p>When the node this component is attached to updates, update the value\nof the Node's mount point.</p>"],["MountPoint.prototype.onUpdate","MountPoint","components/MountPoint.html#onUpdate","",""],["Opacity","Opacity","components/Opacity.html#Opacity","","<p>Opacity is a component designed to allow for smooth tweening\nof the Node's opacity</p>"],["Opacity.prototype.toString","Opacity","components/Opacity.html#toString","()","<p>Return the name of the Opacity component</p>"],["Opacity.prototype.getValue","Opacity","components/Opacity.html#getValue","()","<p>Retrieves internal state of Opacity component</p>"],["Opacity.prototype.setValue","Opacity","components/Opacity.html#setValue","(value)","<p>Set the internal state of the Opacity component</p>"],["Opacity.prototype.set","Opacity","components/Opacity.html#set","(value, transition, callback)","<p>Set the opacity of the Node</p>"],["Opacity.prototype.get","Opacity","components/Opacity.html#get","()","<p>Get the current opacity for the component</p>"],["Opacity.prototype.halt","Opacity","components/Opacity.html#halt","()","<p>Stops Opacity transition</p>"],["Opacity.prototype.isActive","Opacity","components/Opacity.html#isActive","()","<p>Tells whether or not the opacity is in a transition</p>"],["Opacity.prototype.update","Opacity","components/Opacity.html#update","()","<p>When the node this component is attached to updates, update the value\nof the Node's opacity.</p>"],["Opacity.prototype.onUpdate","Opacity","components/Opacity.html#onUpdate","",""],["Origin","Origin","components/Origin.html#Origin","","<p>Origin is a component designed to allow for smooth tweening\nof where on the Node should be considered the origin for rotations and scales.</p>"],["Origin.prototype.toString","Origin","components/Origin.html#toString","()","<p>Return the name of the Origin component</p>"],["Origin.prototype.constructor","Origin","components/Origin.html#constructor","",""],["Origin.prototype.update","Origin","components/Origin.html#update","()","<p>When the node this component is attached to updates, update the value\nof the Node's origin</p>"],["Origin.prototype.onUpdate","Origin","components/Origin.html#onUpdate","",""],["Position","Position","components/Position.html#Position","","<p>The Position component serves as a way to tween to translation of a Node.\n It is also the base class for the other core components that interact\nwith the Vec3 properties on the Node</p>"],["Position.prototype.toString","Position","components/Position.html#toString","()","<p>Return the name of the Position component</p>"],["Position.prototype.getValue","Position","components/Position.html#getValue","()","<p>Gets object containing stringified constructor, and corresponding dimensional values</p>"],["Position.prototype.setValue","Position","components/Position.html#setValue","(state)","<p>Set the translation of the Node</p>"],["Position.prototype.getX","Position","components/Position.html#getX","()","<p>Getter for X translation</p>"],["Position.prototype.getY","Position","components/Position.html#getY","()","<p>Getter for Y translation</p>"],["Position.prototype.getZ","Position","components/Position.html#getZ","()","<p>Getter for z translation</p>"],["Position.prototype.isActive","Position","components/Position.html#isActive","()","<p>Whether or not the Position is currently changing</p>"],["Position.prototype._checkUpdate","Position","components/Position.html#_checkUpdate","()","<p>Decide whether the component needs to be updated on the next tick.</p>"],["Position.prototype.update","Position","components/Position.html#update","()","<p>When the node this component is attached to updates, update the value\nof the Node's position</p>"],["Position.prototype.onUpdate","Position","components/Position.html#onUpdate","",""],["Position.prototype.setX","Position","components/Position.html#setX","(val, transition, callback)","<p>Setter for X position</p>"],["Position.prototype.setY","Position","components/Position.html#setY","(val, transition, callback)","<p>Setter for Y position</p>"],["Position.prototype.setZ","Position","components/Position.html#setZ","(val, transition, callback)","<p>Setter for Z position</p>"],["Position.prototype.set","Position","components/Position.html#set","(x, y, z, transition, callback)","<p>Setter for X, Y, and Z positions</p>"],["Position.prototype.halt","Position","components/Position.html#halt","()","<p>Stops transition of Position component</p>"],["Rotation","Rotation","components/Rotation.html#Rotation","","<p>Rotation is a component that allows the tweening of a Node's rotation. Rotation\nhappens about a Node's origin which is by default [0, 0, .5].</p>"],["Rotation.prototype.toString","Rotation","components/Rotation.html#toString","()","<p>Return the name of the Rotation component</p>"],["Rotation.prototype.constructor","Rotation","components/Rotation.html#constructor","",""],["Rotation.prototype.update","Rotation","components/Rotation.html#update","()","<p>When the node this component is attached to updates, update the value\nof the Node's rotation</p>"],["Rotation.prototype.onUpdate","Rotation","components/Rotation.html#onUpdate","",""],["Scale","Scale","components/Scale.html#Scale","","<p>Scale is a component that allows the tweening of a Node's scale. Scale\nhappens about a Node's origin which is by default [0, 0, .5].</p>"],["Scale.prototype.toString","Scale","components/Scale.html#toString","()","<p>Return the name of the Scale component</p>"],["Scale.prototype.constructor","Scale","components/Scale.html#constructor","",""],["Scale.prototype.update","Scale","components/Scale.html#update","()","<p>When the node this component is attached to updates, update the value\nof the Node's scale.</p>"],["Scale.prototype.onUpdate","Scale","components/Scale.html#onUpdate","",""],["Size","Size","components/Size.html#Size","","<p>Size component used for managing the size of the Node it is attached to.\nSupports absolute and relative (proportional and differential) sizing.</p>"],["Size.prototype.setMode","Size","components/Size.html#setMode","(x, y, z)","<p>Set which mode each axis of Size will have its dimensions\ncalculated by.  Size can be calculated by absolute pixel definitions,\nrelative to its parent, or by the size of its renderables</p>"],["Size.prototype.toString","Size","components/Size.html#toString","()","<p>Return the name of the Size component</p>"],["Size.prototype.getValue","Size","components/Size.html#getValue","()","<p>Returns serialized state of the component.</p>"],["Size.prototype.setValue","Size","components/Size.html#setValue","(state)","<p>Updates state of component.</p>"],["Size.prototype._isActive","Size","components/Size.html#_isActive","(type)","<p>Helper function that grabs the activity of a certain type of size.</p>"],["Size.prototype.isActive","Size","components/Size.html#isActive","(type)","<p>Helper function that grabs the activity of a certain type of size.</p>"],["Size.prototype.onUpdate","Size","components/Size.html#onUpdate","()","<p>When the node this component is attached to updates, update the value\nof the Node's size.</p>"],["Size.prototype.setAbsolute","Size","components/Size.html#setAbsolute","(x, y, z, options, callback)","<p>Applies absolute size.</p>"],["Size.prototype.setProportional","Size","components/Size.html#setProportional","(x, y, z, options, callback)","<p>Applies proportional size.</p>"],["Size.prototype.setDifferential","Size","components/Size.html#setDifferential","(x, y, z, options, callback)","<p>Applies differential size to Size component.</p>"],["Size.prototype.get","Size","components/Size.html#get","()","<p>Retrieves the computed size applied to the underlying Node.</p>"],["Size.prototype.halt","Size","components/Size.html#halt","()","<p>Halts all currently active size transitions.</p>"],["Transform.prototype.toString","Transform","components/Transform.html#toString","()",""],["Transform.prototype.getValue","Transform","components/Transform.html#getValue","()",""],["Transform.prototype.setState","Transform","components/Transform.html#setState","()",""],["Transform.prototype.setOrigin","Transform","components/Transform.html#setOrigin","()",""],["Transform.prototype.setMountPoint","Transform","components/Transform.html#setMountPoint","()",""],["Transform.prototype.setAlign","Transform","components/Transform.html#setAlign","()",""],["Transform.prototype.setScale","Transform","components/Transform.html#setScale","()",""],["Transform.prototype.setPosition","Transform","components/Transform.html#setPosition","()",""],["Transform.prototype.translate","Transform","components/Transform.html#translate","()",""],["Transform.prototype.setRotation","Transform","components/Transform.html#setRotation","()",""],["Transform.prototype.rotate","Transform","components/Transform.html#rotate","()",""],["Transform.prototype.clean","Transform","components/Transform.html#clean","()",""],["Transform.prototype.onUpdate","Transform","components/Transform.html#onUpdate","",""],["Channel","Channel","core/Channel.html#Channel","","<p>Channels are being used for interacting with the UI Thread when running in\na Web Worker or with the UIManager/ Compositor when running in single\nthreaded mode (no Web Worker).</p>"],["Channel.prototype._enterWorkerMode","Channel","core/Channel.html#_enterWorkerMode","()","<p>Called during construction. Subscribes for <code>message</code> event and routes all\nfuture <code>sendMessage</code> messages to the Main Thread (&quot;UI Thread&quot;).</p>\n<p>Primarily used for testing.</p>"],["Channel.prototype.onMessage","Channel","core/Channel.html#onMessage","","<p>Meant to be overridden by <code>Famous</code>.\nAssigned method will be invoked for every received message.</p>"],["Channel.prototype.sendMessage","Channel","core/Channel.html#sendMessage","(message)","<p>Sends a message to the UIManager.</p>"],["Channel.prototype.onmessage","Channel","core/Channel.html#onmessage","","<p>Meant to be overriden by the UIManager when running in the UI Thread.\nUsed for preserving API compatibility with Web Workers.\nWhen running in Web Worker mode, this property won't be mutated.</p>\n<p>Assigned method will be invoked for every message posted by <code>famous-core</code>.</p>"],["Clock","Clock","core/Clock.html#Clock","","<p>Equivalent of an Engine in the Worker Thread. Used to synchronize and manage\ntime across different Threads.</p>"],["Clock.prototype._time","Clock","core/Clock.html#_time","",""],["Clock.prototype._frame","Clock","core/Clock.html#_frame","",""],["Clock.prototype._timerQueue","Clock","core/Clock.html#_timerQueue","",""],["Clock.prototype._updatingIndex","Clock","core/Clock.html#_updatingIndex","",""],["Clock.prototype._scale","Clock","core/Clock.html#_scale","",""],["Clock.prototype._scaledTime","Clock","core/Clock.html#_scaledTime","",""],["Clock.prototype.setScale","Clock","core/Clock.html#setScale","()",""],["Clock.prototype.getScale","Clock","core/Clock.html#getScale","()",""],["Clock.prototype.step","Clock","core/Clock.html#step","()",""],["Clock.prototype.now","Clock","core/Clock.html#now","()",""],["Clock.prototype.getTime","Clock","core/Clock.html#getTime","",""],["Clock.prototype.getFrame","Clock","core/Clock.html#getFrame","()",""],["Clock.prototype.setTimeout","Clock","core/Clock.html#setTimeout","()",""],["Clock.prototype.setInterval","Clock","core/Clock.html#setInterval","()",""],["Clock.prototype.clearTimer","Clock","core/Clock.html#clearTimer","()",""],["Dispatch","Dispatch","core/Dispatch.html#Dispatch","","<p>The Dispatch class is used to propogate events down the\nscene graph.</p>"],["Dispatch.prototype._nodes","Dispatch","core/Dispatch.html#_nodes","",""],["Dispatch.prototype._queue","Dispatch","core/Dispatch.html#_queue","",""],["Dispatch.prototype._setUpdater","Dispatch","core/Dispatch.html#_setUpdater","(updater)","<p>Protected method that sets the updater for the dispatch. The updater will\nalmost certainly be the FamousEngine class.</p>"],["Dispatch.prototype.addChildrenToQueue","Dispatch","core/Dispatch.html#addChildrenToQueue","()",""],["Dispatch.prototype.next","Dispatch","core/Dispatch.html#next","()",""],["Dispatch.prototype.breadthFirstNext","Dispatch","core/Dispatch.html#breadthFirstNext","()",""],["Dispatch.prototype.mount","Dispatch","core/Dispatch.html#mount","()",""],["Dispatch.prototype.dismount","Dispatch","core/Dispatch.html#dismount","()",""],["Dispatch.prototype.getNode","Dispatch","core/Dispatch.html#getNode","()",""],["Dispatch.prototype.show","Dispatch","core/Dispatch.html#show","()",""],["Dispatch.prototype.hide","Dispatch","core/Dispatch.html#hide","()",""],["Dispatch.prototype.lookupNode","Dispatch","core/Dispatch.html#lookupNode","(location)","<p>lookupNode takes a path and returns the node at the location specified\nby the path, if one exists. If not, it returns undefined.</p>"],["Dispatch.prototype.dispatch","Dispatch","core/Dispatch.html#dispatch","(path, event, payload)","<p>dispatch takes an event name and a payload and dispatches it to the\nentire scene graph below the node that the dispatcher is on. The nodes\nreceive the events in a breadth first traversal, meaning that parents\nhave the opportunity to react to the event before children.</p>"],["Dispatch.prototype.dispatchUIEvent","Dispatch","core/Dispatch.html#dispatchUIEvent","(path, event, payload)","<p>dispatchUIevent takes a path, an event name, and a payload and dispatches them in\na manner anologous to DOM bubbling. It first traverses down to the node specified at\nthe path. That node receives the event first, and then every ancestor receives the event\nuntil the context.</p>"],["Event","Event","core/Event.html#Event","","<p>The Event class adds the stopPropagation functionality\nto the UIEvents within the scene graph.</p>"],["FamousEngine","FamousEngine","core/FamousEngine.html#FamousEngine","","<p>Famous has two responsibilities, one to act as the highest level\nupdater and another to send messages over to the renderers. It is\na singleton.</p>"],["FamousEngine.prototype._updateQueue","FamousEngine","core/FamousEngine.html#_updateQueue","",""],["FamousEngine.prototype._nextUpdateQueue","FamousEngine","core/FamousEngine.html#_nextUpdateQueue","",""],["FamousEngine.prototype._scenes","FamousEngine","core/FamousEngine.html#_scenes","",""],["FamousEngine.prototype._messages","FamousEngine","core/FamousEngine.html#_messages","",""],["FamousEngine.prototype._inUpdate","FamousEngine","core/FamousEngine.html#_inUpdate","",""],["FamousEngine.prototype._clock","FamousEngine","core/FamousEngine.html#_clock","",""],["FamousEngine.prototype._channel","FamousEngine","core/FamousEngine.html#_channel","",""],["FamousEngine.prototype.init","FamousEngine","core/FamousEngine.html#init","(options)","<p>An init script that initializes the FamousEngine with options\nor default parameters.</p>"],["FamousEngine.prototype.setChannel","FamousEngine","core/FamousEngine.html#setChannel","(channel)","<p>Sets the channel that the engine will use to communicate to\nthe renderers.</p>"],["FamousEngine.prototype.getChannel","FamousEngine","core/FamousEngine.html#getChannel","()","<p>Returns the channel that the engine is currently using\nto communicate with the renderers.</p>"],["FamousEngine.prototype._update","FamousEngine","core/FamousEngine.html#_update","()","<p>_update is the body of the update loop. The frame consists of\npulling in appending the nextUpdateQueue to the currentUpdate queue\nthen moving through the updateQueue and calling onUpdate with the current\ntime on all nodes. While _update is called _inUpdate is set to true and\nall requests to be placed in the update queue will be forwarded to the\nnextUpdateQueue.</p>"],["FamousEngine.prototype.requestUpdate","FamousEngine","core/FamousEngine.html#requestUpdate","(requester)","<p>requestUpdates takes a class that has an onUpdate method and puts it\ninto the updateQueue to be updated at the next frame.\nIf FamousEngine is currently in an update, requestUpdate\npasses its argument to requestUpdateOnNextTick.</p>"],["FamousEngine.prototype.requestUpdateOnNextTick","FamousEngine","core/FamousEngine.html#requestUpdateOnNextTick","(requester)","<p>requestUpdateOnNextTick is requests an update on the next frame.\nIf FamousEngine is not currently in an update than it is functionally equivalent\nto requestUpdate. This method should be used to prevent infinite loops where\na class is updated on the frame but needs to be updated again next frame.</p>"],["FamousEngine.prototype.handleMessage","FamousEngine","core/FamousEngine.html#handleMessage","(messages)","<p>postMessage sends a message queue into FamousEngine to be processed.\nThese messages will be interpreted and sent into the scene graph\nas events if necessary.</p>"],["FamousEngine.prototype.handleWith","FamousEngine","core/FamousEngine.html#handleWith","(messages)","<p>handleWith is a method that takes an array of messages following the\nWITH command. It'll then issue the next commands to the path specified\nby the WITH command.</p>"],["FamousEngine.prototype.handleFrame","FamousEngine","core/FamousEngine.html#handleFrame","(messages)","<p>handleFrame is called when the renderers issue a FRAME command to\nFamousEngine. FamousEngine will then step updating the scene graph to the current time.</p>"],["FamousEngine.prototype.step","FamousEngine","core/FamousEngine.html#step","(time)","<p>step updates the clock and the scene graph and then sends the draw commands\nthat accumulated in the update to the renderers.</p>"],["FamousEngine.prototype.getContext","FamousEngine","core/FamousEngine.html#getContext","(selector)","<p>returns the context of a particular path. The context is looked up by the selector\nportion of the path and is listed from the start of the string to the first\n'/'.</p>"],["FamousEngine.prototype.getClock","FamousEngine","core/FamousEngine.html#getClock","()","<p>Returns the instance of clock used by the FamousEngine.</p>"],["FamousEngine.prototype.message","FamousEngine","core/FamousEngine.html#message","(command)","<p>Enqueues a message to be transfered to the renderers.</p>"],["FamousEngine.prototype.createScene","FamousEngine","core/FamousEngine.html#createScene","(selector)","<p>Creates a scene under which a scene graph could be built.</p>"],["FamousEngine.prototype.addScene","FamousEngine","core/FamousEngine.html#addScene","(scene)","<p>Introduce an already instantiated scene to the engine.</p>"],["FamousEngine.prototype.removeScene","FamousEngine","core/FamousEngine.html#removeScene","(scene)","<p>Remove a scene.</p>"],["FamousEngine.prototype.startRenderLoop","FamousEngine","core/FamousEngine.html#startRenderLoop","()","<p>Starts the engine running in the Main-Thread.\nThis effects <strong>every</strong> updateable managed by the Engine.</p>"],["FamousEngine.prototype.stopRenderLoop","FamousEngine","core/FamousEngine.html#stopRenderLoop","()","<p>Stops the engine running in the Main-Thread.\nThis effects <strong>every</strong> updateable managed by the Engine.</p>"],["FamousEngine.prototype.startEngine","FamousEngine","core/FamousEngine.html#startEngine","()",""],["FamousEngine.prototype.stopEngine","FamousEngine","core/FamousEngine.html#stopEngine","()",""],["Node","Node","core/Node.html#Node","","<p>Nodes define hierarchy and geometrical transformations. They can be moved\n(translated), scaled and rotated.</p>\n<p>A Node is either mounted or unmounted. Unmounted nodes are detached from the\nscene graph. Unmounted nodes have no parent node, while each mounted node has\nexactly one parent. Nodes have an arbitary number of children, which can be\ndynamically added using {@link Node#addChild}.</p>\n<p>Each Node has an arbitrary number of <code>components</code>. Those components can\nsend <code>draw</code> commands to the renderer or mutate the node itself, in which case\nthey define behavior in the most explicit way. Components that send <code>draw</code>\ncommands are considered <code>renderables</code>. From the node's perspective, there is\nno distinction between nodes that send draw commands and nodes that define\nbehavior.</p>\n<p>Because of the fact that Nodes themself are very unopinioted (they don't\n&quot;render&quot; to anything), they are often being subclassed in order to add e.g.\ncomponents at initialization to them. Because of this flexibility, they might\nas well have been called <code>Entities</code>.</p>"],["Node.prototype._requestingUpdate","Node","core/Node.html#_requestingUpdate","",""],["Node.prototype._inUpdate","Node","core/Node.html#_inUpdate","",""],["Node.prototype._mounted","Node","core/Node.html#_mounted","",""],["Node.prototype._shown","Node","core/Node.html#_shown","",""],["Node.prototype._updater","Node","core/Node.html#_updater","",""],["Node.prototype._opacity","Node","core/Node.html#_opacity","",""],["Node.prototype._UIEvents","Node","core/Node.html#_UIEvents","",""],["Node.prototype._updateQueue","Node","core/Node.html#_updateQueue","",""],["Node.prototype._nextUpdateQueue","Node","core/Node.html#_nextUpdateQueue","",""],["Node.prototype._freedComponentIndicies","Node","core/Node.html#_freedComponentIndicies","",""],["Node.prototype._components","Node","core/Node.html#_components","",""],["Node.prototype._freedChildIndicies","Node","core/Node.html#_freedChildIndicies","",""],["Node.prototype._children","Node","core/Node.html#_children","",""],["Node.prototype._parent","Node","core/Node.html#_parent","",""],["Node.prototype._id","Node","core/Node.html#_id","",""],["Node.prototype._transformID","Node","core/Node.html#_transformID","",""],["Node.prototype._sizeID","Node","core/Node.html#_sizeID","",""],["Node.prototype._init","Node","core/Node.html#_init","()","<p>Protected method. Initializes a node with a default Transform and Size component</p>"],["Node.prototype._setParent","Node","core/Node.html#_setParent","(parent)","<p>Protected method. Sets the parent of this node such that it can be looked up.</p>"],["Node.prototype._setMounted","Node","core/Node.html#_setMounted","(mounted, path)","<p>Protected method. Sets the mount state of the node. Should only be called\nby the dispatch</p>"],["Node.prototype._setShown","Node","core/Node.html#_setShown","(shown)","<p>Protected method, sets whether or not the Node is shown. Should only\nbe called by the dispatch</p>"],["Node.prototype._setUpdater","Node","core/Node.html#_setUpdater","(updater)","<p>Protected method. Sets the updater of the node.</p>"],["Node.prototype.getLocation","Node","core/Node.html#getLocation","()",""],["Node.prototype.emit","Node","core/Node.html#emit","()",""],["Node.prototype.sendDrawCommand","Node","core/Node.html#sendDrawCommand","()",""],["Node.prototype.getValue","Node","core/Node.html#getValue","()",""],["Node.prototype.getComputedValue","Node","core/Node.html#getComputedValue","()",""],["Node.prototype.getChildren","Node","core/Node.html#getChildren","()",""],["Node.prototype.getParent","Node","core/Node.html#getParent","()",""],["Node.prototype.requestUpdate","Node","core/Node.html#requestUpdate","()",""],["Node.prototype.requestUpdateOnNextTick","Node","core/Node.html#requestUpdateOnNextTick","()",""],["Node.prototype.isMounted","Node","core/Node.html#isMounted","()",""],["Node.prototype.isShown","Node","core/Node.html#isShown","()",""],["Node.prototype.getOpacity","Node","core/Node.html#getOpacity","()",""],["Node.prototype.getMountPoint","Node","core/Node.html#getMountPoint","()",""],["Node.prototype.getAlign","Node","core/Node.html#getAlign","()",""],["Node.prototype.getOrigin","Node","core/Node.html#getOrigin","()",""],["Node.prototype.getPosition","Node","core/Node.html#getPosition","()",""],["Node.prototype.getRotation","Node","core/Node.html#getRotation","()",""],["Node.prototype.getScale","Node","core/Node.html#getScale","()","<p>Returns the scale of the node</p>"],["Node.prototype.getSizeMode","Node","core/Node.html#getSizeMode","()","<p>Returns the current size mode of the node</p>"],["Node.prototype.getProportionalSize","Node","core/Node.html#getProportionalSize","()","<p>Returns the current proportional size</p>"],["Node.prototype.getDifferentialSize","Node","core/Node.html#getDifferentialSize","()","<p>Returns the differential size of the node</p>"],["Node.prototype.getAbsoluteSize","Node","core/Node.html#getAbsoluteSize","()","<p>Returns the absolute size of the node</p>"],["Node.prototype.getRenderSize","Node","core/Node.html#getRenderSize","()","<p>Returns the current Render Size of the node. Note that the render size\nis asynchronous (will always be one frame behind) and needs to be explicitely\ncalculated by setting the proper size mode.</p>"],["Node.prototype.getSize","Node","core/Node.html#getSize","()","<p>Returns the external size of the node</p>"],["Node.prototype.getTransform","Node","core/Node.html#getTransform","()","<p>Returns the current world transform of the node</p>"],["Node.prototype.getUIEvents","Node","core/Node.html#getUIEvents","()","<p>Get the list of the UI Events that are currently associated with this node</p>"],["Node.prototype.addChild","Node","core/Node.html#addChild","(child)","<p>Adds a new child to this node. If this method is called with no argument it will\ncreate a new node, however it can also be called with an existing node which it will\nappend to the node that this method is being called on. Returns the new or passed in node.</p>"],["Node.prototype.removeChild","Node","core/Node.html#removeChild","(child)","<p>Removes a child node from another node. The passed in node must be\na child of the node that this method is called upon.</p>"],["Node.prototype.addComponent","Node","core/Node.html#addComponent","()",""],["Node.prototype.getComponent","Node","core/Node.html#getComponent","()",""],["Node.prototype.removeComponent","Node","core/Node.html#removeComponent","()",""],["Node.prototype.removeUIEvent","Node","core/Node.html#removeUIEvent","(eventName)","<p>Removes a node's subscription to a particular UIEvent. All components \non the node will have the opportunity to remove all listeners depending\non this event.</p>"],["Node.prototype.addUIEvent","Node","core/Node.html#addUIEvent","(eventName)","<p>Subscribes a node to a UI Event. All components on the node\nwill have the opportunity to begin listening to that event\nand alerting the scene graph.</p>"],["Node.prototype._requestUpdate","Node","core/Node.html#_requestUpdate","(force)","<p>Private method for the Node to request an update for itself.</p>"],["Node.prototype._vecOptionalSet","Node","core/Node.html#_vecOptionalSet","(vec, index, val)","<p>Private method to set an optional value in an array, and\nrequest an update if this changes the value of the array.</p>"],["Node.prototype.show","Node","core/Node.html#show","()","<p>Shows the node, which is to say, calls onShow on all of the\nnode's components. Renderable components can then issue the\ndraw commands necessary to be shown.</p>"],["Node.prototype.hide","Node","core/Node.html#hide","()","<p>Hides the node, which is to say, calls onHide on all of the\nnode's components. Renderable components can then issue\nthe draw commands necessary to be hidden</p>"],["Node.prototype.setAlign","Node","core/Node.html#setAlign","(x, y, z)","<p>Sets the align value of the node. Will call onAlignChange\non all of the Node's components.</p>"],["Node.prototype.setMountPoint","Node","core/Node.html#setMountPoint","(x, y, z)","<p>Sets the mount point value of the node. Will call onMountPointChange\non all of the node's components.</p>"],["Node.prototype.setOrigin","Node","core/Node.html#setOrigin","(x, y, z)","<p>Sets the origin value of the node. Will call onOriginChange\non all of the node's components.</p>"],["Node.prototype.setPosition","Node","core/Node.html#setPosition","(x, y, z)","<p>Sets the position of the node. Will call onPositionChange\non all of the node's components.</p>"],["Node.prototype.setRotation","Node","core/Node.html#setRotation","(x, y, z, w)","<p>Sets the rotation of the node. Will call onRotationChange\non all of the node's components. This method takes either\nEuler angles or a quaternion. If the fourth argument is undefined\nEuler angles are assumed.</p>"],["Node.prototype.setScale","Node","core/Node.html#setScale","(x, y, z)","<p>Sets the scale of the node. The default value is 1 in all dimensions.\nThe node's components will have onScaleChanged called on them.</p>"],["Node.prototype.setOpacity","Node","core/Node.html#setOpacity","(val)","<p>Sets the value of the opacity of this node. All of the node's\ncomponents will have onOpacityChange called on them/</p>"],["Node.prototype.setSizeMode","Node","core/Node.html#setSizeMode","()",""],["Node.prototype.setProportionalSize","Node","core/Node.html#setProportionalSize","()",""],["Node.prototype.setDifferentialSize","Node","core/Node.html#setDifferentialSize","()",""],["Node.prototype.setAbsoluteSize","Node","core/Node.html#setAbsoluteSize","()",""],["Node.prototype.getFrame","Node","core/Node.html#getFrame","()","<p>Method for getting the current frame. Will be deprecated.</p>"],["Node.prototype.getComponents","Node","core/Node.html#getComponents","()",""],["Node.prototype.update","Node","core/Node.html#update","()",""],["Node.prototype.mount","Node","core/Node.html#mount","()",""],["Node.prototype.dismount","Node","core/Node.html#dismount","()","<p>Dismounts (detaches) the node from the scene graph by removing it as a\nchild of its parent.</p>"],["PathStore","PathStore","core/PathStore.html#PathStore","","<p>A class that can be used to associate any item with a path.\nItems and paths are kept in flat arrays for easy iteration\nand a memo is used to provide constant time lookup.</p>"],["PathStore.prototype.items","PathStore","core/PathStore.html#items","",""],["PathStore.prototype.paths","PathStore","core/PathStore.html#paths","",""],["PathStore.prototype.memo","PathStore","core/PathStore.html#memo","",""],["PathStore.prototype.insert","PathStore","core/PathStore.html#insert","(path, item)","<p>Associates an item with the given path. Errors if an item\nalready exists at the given path.</p>"],["PathStore.prototype.remove","PathStore","core/PathStore.html#remove","(path)","<p>Removes the the item from the store at the given path.\nErrors if no item exists at the given path.</p>"],["PathStore.prototype.get","PathStore","core/PathStore.html#get","(path)","<p>Returns the item stored at the current path. Returns undefined\nif no item is stored at that path.</p>"],["PathStore.prototype.getItems","PathStore","core/PathStore.html#getItems","()","<p>Returns an array of the items currently stored in this\nPathStore.</p>"],["PathStore.prototype.getPaths","PathStore","core/PathStore.html#getPaths","()","<p>Returns an array of the paths currently stored in this\nPathStore.</p>"],["Scene","Scene","core/Scene.html#Scene","","<p>Scene is the bottom of the scene graph. It is its own\nparent and provides the global updater to the scene graph.</p>"],["Scene.prototype._globalUpdater","Scene","core/Scene.html#_globalUpdater","",""],["Scene.prototype._selector","Scene","core/Scene.html#_selector","",""],["Scene.prototype.constructor","Scene","core/Scene.html#constructor","",""],["Scene.prototype.getUpdater","Scene","core/Scene.html#getUpdater","()","<p>Scene getUpdater function returns the passed in updater</p>"],["Scene.prototype.getSelector","Scene","core/Scene.html#getSelector","()","<p>Returns the selector that the context was instantiated with</p>"],["Scene.prototype.getDispatch","Scene","core/Scene.html#getDispatch","()","<p>Returns the dispatcher of the context. Used to send events\nto the nodes in the scene graph.</p>"],["Scene.prototype.onReceive","Scene","core/Scene.html#onReceive","(event, payload)","<p>Receives an event. If the event is 'CONTEXT_RESIZE' it sets the size of the scene\ngraph to the payload, which must be an array of numbers of at least\nlength three representing the pixel size in 3 dimensions.</p>"],["Scene.prototype.mount","Scene","core/Scene.html#mount","()",""],["Size","Size","core/Size.html#Size","","<p>The Size class is responsible for processing Size from a node</p>"],["Size.prototype.setParent","Size","core/Size.html#setParent","(parent)","<p>Sets the parent of this size.</p>"],["Size.prototype.getParent","Size","core/Size.html#getParent","()","<p>Gets the parent of this size.</p>"],["Size.prototype.setSizeMode","Size","core/Size.html#setSizeMode","(x, y, z)","<p>Gets the size mode of this size representation</p>"],["Size.prototype.getSizeMode","Size","core/Size.html#getSizeMode","()","<p>Returns the size mode of this component.</p>"],["Size.prototype.setAbsolute","Size","core/Size.html#setAbsolute","(x, y, z)","<p>Sets the absolute size of this size representation.</p>"],["Size.prototype.getAbsolute","Size","core/Size.html#getAbsolute","()","<p>Gets the absolute size of this size representation</p>"],["Size.prototype.setProportional","Size","core/Size.html#setProportional","(x, y, z)","<p>Sets the proportional size of this size representation.</p>"],["Size.prototype.getProportional","Size","core/Size.html#getProportional","()","<p>Gets the propotional size of this size representation</p>"],["Size.prototype.setDifferential","Size","core/Size.html#setDifferential","(x, y, z)","<p>Sets the differential size of this size representation.</p>"],["Size.prototype.getDifferential","Size","core/Size.html#getDifferential","()","<p>Gets the differential size of this size representation</p>"],["Size.prototype.get","Size","core/Size.html#get","(x, y, z)","<p>Sets the size of this size representation.</p>"],["Size.prototype.fromComponents","Size","core/Size.html#fromComponents","(components)","<p>fromSpecWithParent takes the parent node's size, the target node's spec,\nand a target array to write to. Using the node's size mode it calculates\na final size for the node from the node's spec. Returns whether or not\nthe final size has changed from its last value.</p>"],["SizeSystem","SizeSystem","core/SizeSystem.html#SizeSystem","","<p>The size system is used to calculate size throughout the scene graph.\nIt holds size components and operates upon them.</p>"],["SizeSystem.prototype.pathStore","SizeSystem","core/SizeSystem.html#pathStore","",""],["SizeSystem.prototype.registerSizeAtPath","SizeSystem","core/SizeSystem.html#registerSizeAtPath","(path, size)","<p>Registers a size component to a give path. A size component can be passed as the second argument\nor a default one will be created. Throws if no size component has been added at the parent path.</p>"],["SizeSystem.prototype.deregisterSizeAtPath","SizeSystem","core/SizeSystem.html#deregisterSizeAtPath","(path)","<p>Removes the size component from the given path. Will throw if no component is at that\npath</p>"],["SizeSystem.prototype.get","SizeSystem","core/SizeSystem.html#get","(path)","<p>Returns the size component stored at a given path. Returns undefined if no\nsize component is registered to that path.</p>"],["SizeSystem.prototype.update","SizeSystem","core/SizeSystem.html#update","()","<p>Updates the sizes in the scene graph. Called internally by the famous engine.</p>"],["Transform","Transform","core/Transform.html#Transform","","<p>The transform class is responsible for calculating the transform of a particular\nnode from the data on the node and its parent</p>"],["Transform.prototype.reset","Transform","core/Transform.html#reset","()","<p>resets the transform state such that it no longer has a parent\nand is not a breakpoint.</p>"],["Transform.prototype.setParent","Transform","core/Transform.html#setParent","(parent)","<p>sets the parent of this transform.</p>"],["Transform.prototype.getParent","Transform","core/Transform.html#getParent","()","<p>returns the parent of this transform</p>"],["Transform.prototype.setBreakPoint","Transform","core/Transform.html#setBreakPoint","()","<p>Makes this transform a breakpoint. This will cause it to calculate\nboth a local (relative to the nearest ancestor breakpoint) and a world\nmatrix (relative to the scene).</p>"],["Transform.prototype.isBreakPoint","Transform","core/Transform.html#isBreakPoint","()","<p>returns whether or not this transform is a breakpoint.</p>"],["Transform.prototype.getLocalTransform","Transform","core/Transform.html#getLocalTransform","()","<p>returns the local transform</p>"],["Transform.prototype.getWorldTransform","Transform","core/Transform.html#getWorldTransform","()","<p>returns the world transform. Requires that this transform is a breakpoint.</p>"],["Transform.prototype.calculate","Transform","core/Transform.html#calculate","(node)","<p>Takes a node and calculates the proper transform from it.</p>"],["Transform.prototype.getPosition","Transform","core/Transform.html#getPosition","()","<p>Gets the position component of the transform</p>"],["Transform.prototype.setPosition","Transform","core/Transform.html#setPosition","(x, y, z)","<p>Sets the position component of the transform.</p>"],["Transform.prototype.getRotation","Transform","core/Transform.html#getRotation","()","<p>Gets the rotation component of the transform. Will return a quaternion.</p>"],["Transform.prototype.setRotation","Transform","core/Transform.html#setRotation","(x, y, z, w)","<p>Sets the rotation component of the transform. Can take either Euler\nangles or a quaternion.</p>"],["Transform.prototype.getScale","Transform","core/Transform.html#getScale","()","<p>Gets the scale component of the transform</p>"],["Transform.prototype.setScale","Transform","core/Transform.html#setScale","(x, y, z)","<p>Sets the scale component of the transform.</p>"],["Transform.prototype.getAlign","Transform","core/Transform.html#getAlign","()","<p>Gets the align value of the transform</p>"],["Transform.prototype.setAlign","Transform","core/Transform.html#setAlign","(x, y, z)","<p>Sets the align value of the transform.</p>"],["Transform.prototype.getMountPoint","Transform","core/Transform.html#getMountPoint","()","<p>Gets the mount point value of the transform.</p>"],["Transform.prototype.setMountPoint","Transform","core/Transform.html#setMountPoint","(x, y, z)","<p>Sets the mount point value of the transform.</p>"],["Transform.prototype.getOrigin","Transform","core/Transform.html#getOrigin","()","<p>Gets the origin of the transform.</p>"],["Transform.prototype.setOrigin","Transform","core/Transform.html#setOrigin","(x, y, z)","<p>Sets the origin of the transform.</p>"],["Transform.prototype.calculateWorldMatrix","Transform","core/Transform.html#calculateWorldMatrix","()","<p>Calculates the world for this particular transform.</p>"],["TransformSystem.prototype.registerTransformAtPath","TransformSystem","core/TransformSystem.html#registerTransformAtPath","()",""],["TransformSystem.prototype.deregisterTransformAtPath","TransformSystem","core/TransformSystem.html#deregisterTransformAtPath","()",""],["TransformSystem.prototype.makeBreakPointAt","TransformSystem","core/TransformSystem.html#makeBreakPointAt","(path)","<p>Method which will make the transform currently stored at the given path a breakpoint.\nA transform being a breakpoint means that both a local and world transform will be calculated\nfor that point. The local transform being the concatinated transform of all ancestor transforms up\nuntil the nearest breakpoint, and the world being the concatinated transform of all ancestor transforms.\nThis method throws if no transform is at the provided path.</p>"],["TransformSystem.prototype.get","TransformSystem","core/TransformSystem.html#get","(path)","<p>Returns the instance of the transform class associated with the given path,\nor undefined if no transform is associated.</p>"],["TransformSystem.prototype.onUpdate","TransformSystem","core/TransformSystem.html#onUpdate","()",""],["DOMElement","DOMElement","dom-renderables/DOMElement.html#DOMElement","","<p>A DOMElement is a component that can be added to a Node with the\npurpose of sending draw commands to the renderer. Renderables send draw commands\nto through their Nodes to the Compositor where they are acted upon.</p>"],["DOMElement.prototype.getValue","DOMElement","dom-renderables/DOMElement.html#getValue","()","<p>Serializes the state of the DOMElement.</p>"],["DOMElement.prototype.onUpdate","DOMElement","dom-renderables/DOMElement.html#onUpdate","()","<p>Method to be invoked by the node as soon as an update occurs. This allows\nthe DOMElement renderable to dynamically react to state changes on the Node.</p>\n<p>This flushes the internal draw command queue by sending individual commands\nto the node using <code>sendDrawCommand</code>.</p>"],["DOMElement.prototype.onMount","DOMElement","dom-renderables/DOMElement.html#onMount","()",""],["DOMElement.prototype.onDismount","DOMElement","dom-renderables/DOMElement.html#onDismount","()","<p>Method to be invoked by the Node as soon as the node is being dismounted\neither directly or by dismounting one of its ancestors.</p>"],["DOMElement.prototype.onShow","DOMElement","dom-renderables/DOMElement.html#onShow","()","<p>Method to be invoked by the node as soon as the DOMElement is being shown.\nThis results into the DOMElement setting the <code>display</code> property to <code>block</code>\nand therefore visually showing the corresponding DOMElement (again).</p>"],["DOMElement.prototype.onHide","DOMElement","dom-renderables/DOMElement.html#onHide","()","<p>Method to be invoked by the node as soon as the DOMElement is being hidden.\nThis results into the DOMElement setting the <code>display</code> property to <code>none</code>\nand therefore visually hiding the corresponding DOMElement (again).</p>"],["DOMElement.prototype.setCutoutState","DOMElement","dom-renderables/DOMElement.html#setCutoutState","(usesCutout)","<p>Enables or disables WebGL 'cutout' for this element, which affects\nhow the element is layered with WebGL objects in the scene.</p>"],["DOMElement.prototype.onTransformChange","DOMElement","dom-renderables/DOMElement.html#onTransformChange","(transform)","<p>Method to be invoked by the node as soon as the transform matrix associated\nwith the node changes. The DOMElement will react to transform changes by sending\n<code>CHANGE_TRANSFORM</code> commands to the <code>DOMRenderer</code>.</p>"],["DOMElement.prototype.onSizeChange","DOMElement","dom-renderables/DOMElement.html#onSizeChange","(x, y)","<p>Method to be invoked by the node as soon as its computed size changes.</p>"],["DOMElement.prototype.onOpacityChange","DOMElement","dom-renderables/DOMElement.html#onOpacityChange","(opacity)","<p>Method to be invoked by the node as soon as its opacity changes</p>"],["DOMElement.prototype.onAddUIEvent","DOMElement","dom-renderables/DOMElement.html#onAddUIEvent","(uiEvent)","<p>Method to be invoked by the node as soon as a new UIEvent is being added.\nThis results into an <code>ADD_EVENT_LISTENER</code> command being sent.</p>"],["DOMElement.prototype.onRemoveUIEvent","DOMElement","dom-renderables/DOMElement.html#onRemoveUIEvent","(UIEvent)","<p>Method to be invoked by the node as soon as a UIEvent is removed from\nthe node.  This results into an <code>UNSUBSCRIBE</code> command being sent.</p>"],["DOMElement.prototype._subscribe","DOMElement","dom-renderables/DOMElement.html#_subscribe","(uiEvent)","<p>Appends an <code>SUBSCRIBE</code> command to the command queue.</p>"],["DOMElement.prototype.preventDefault","DOMElement","dom-renderables/DOMElement.html#preventDefault","(uiEvent)","<p>When running in a worker, the browser's default action for specific events\ncan't be prevented on a case by case basis (via <code>e.preventDefault()</code>).\nInstead this function should be used to register an event to be prevented by\ndefault.</p>"],["DOMElement.prototype.allowDefault","DOMElement","dom-renderables/DOMElement.html#allowDefault","(uiEvent)","<p>Opposite of {@link DOMElement#preventDefault}. No longer prevent the\nbrowser's default action on subsequent events of this type.</p>"],["DOMElement.prototype._unsubscribe","DOMElement","dom-renderables/DOMElement.html#_unsubscribe","(UIEvent)","<p>Appends an <code>UNSUBSCRIBE</code> command to the command queue.</p>"],["DOMElement.prototype.onSizeModeChange","DOMElement","dom-renderables/DOMElement.html#onSizeModeChange","(x, y, z)","<p>Method to be invoked by the node as soon as the underlying size mode\nchanges. This results into the size being fetched from the node in\norder to update the actual, rendered size.</p>"],["DOMElement.prototype.getRenderSize","DOMElement","dom-renderables/DOMElement.html#getRenderSize","()","<p>Method to be retrieve the rendered size of the DOM element that is\ndrawn for this node.</p>"],["DOMElement.prototype._requestUpdate","DOMElement","dom-renderables/DOMElement.html#_requestUpdate","()","<p>Method to have the component request an update from its Node</p>"],["DOMElement.prototype.init","DOMElement","dom-renderables/DOMElement.html#init","()","<p>Initializes the DOMElement by sending the <code>INIT_DOM</code> command. This creates\nor reallocates a new Element in the actual DOM hierarchy.</p>"],["DOMElement.prototype.setId","DOMElement","dom-renderables/DOMElement.html#setId","(id)","<p>Sets the id attribute of the DOMElement.</p>"],["DOMElement.prototype.addClass","DOMElement","dom-renderables/DOMElement.html#addClass","(value)","<p>Adds a new class to the internal class list of the underlying Element in the\nDOM.</p>"],["DOMElement.prototype.removeClass","DOMElement","dom-renderables/DOMElement.html#removeClass","(value)","<p>Removes a class from the DOMElement's classList.</p>"],["DOMElement.prototype.hasClass","DOMElement","dom-renderables/DOMElement.html#hasClass","(value)","<p>Checks if the DOMElement has the passed in class.</p>"],["DOMElement.prototype.setAttribute","DOMElement","dom-renderables/DOMElement.html#setAttribute","(name, value)","<p>Sets an attribute of the DOMElement.</p>"],["DOMElement.prototype.setProperty","DOMElement","dom-renderables/DOMElement.html#setProperty","(name, value)","<p>Sets a CSS property</p>"],["DOMElement.prototype.setContent","DOMElement","dom-renderables/DOMElement.html#setContent","(content)","<p>Sets the content of the DOMElement. This is using <code>innerHTML</code>, escaping user\ngenerated content is therefore essential for security purposes.</p>"],["DOMElement.prototype.on","DOMElement","dom-renderables/DOMElement.html#on","()",""],["DOMElement.prototype.onReceive","DOMElement","dom-renderables/DOMElement.html#onReceive","(event, payload)","<p>Function to be invoked by the Node whenever an event is being received.\nThere are two different ways to subscribe for those events:</p>\n<ol>\n<li>By overriding the onReceive method (and possibly using <code>switch</code> in order\n to differentiate between the different event types).</li>\n<li>By using DOMElement and using the built-in CallbackStore.</li>\n</ol>"],["DOMElement.prototype.draw","DOMElement","dom-renderables/DOMElement.html#draw","()","<p>The draw function is being used in order to allow mutating the DOMElement\nbefore actually mounting the corresponding node.</p>"],["DOMRenderer","DOMRenderer","dom-renderers/DOMRenderer.html#DOMRenderer","","<p>DOMRenderer is a class responsible for adding elements\nto the DOM and writing to those elements.\nThere is a DOMRenderer per context, represented as an\nelement and a selector. It is instantiated in the\ncontext class.</p>"],["DOMRenderer.prototype.subscribe","DOMRenderer","dom-renderers/DOMRenderer.html#subscribe","(type, preventDefault)","<p>Attaches an EventListener to the element associated with the passed in path.\nPrevents the default browser action on all subsequent events if\n<code>preventDefault</code> is truthy.\nAll incoming events will be forwarded to the compositor by invoking the\n<code>sendEvent</code> method.\nDelegates events if possible by attaching the event listener to the context.</p>"],["DOMRenderer.prototype.unsubscribe","DOMRenderer","dom-renderers/DOMRenderer.html#unsubscribe","(type)","<p>Unsubscribes from all events that are of the specified type.</p>"],["DOMRenderer.prototype.preventDefault","DOMRenderer","dom-renderers/DOMRenderer.html#preventDefault","(type)","<p>Used to preventDefault if an event of the specified type is being emitted on\nthe currently loaded target.</p>"],["DOMRenderer.prototype.allowDefault","DOMRenderer","dom-renderers/DOMRenderer.html#allowDefault","(type)","<p>Used to undo a previous call to preventDefault. No longer <code>preventDefault</code>\nfor this event on the loaded target.</p>"],["DOMRenderer.prototype._listen","DOMRenderer","dom-renderers/DOMRenderer.html#_listen","(type)","<p>Internal helper function used for adding an event listener for the the\ncurrently loaded ElementCache.</p>\n<p>If the event can be delegated as specified in the {@link EventMap}, the\nbound {@link _triggerEvent} function will be added as a listener on the\nroot element. Otherwise, the listener will be added directly to the target\nelement.</p>"],["DOMRenderer.prototype.unsubscribe","DOMRenderer","dom-renderers/DOMRenderer.html#unsubscribe","(type)","<p>Removes an EventListener of given type from the element on which it was\nregistered.</p>"],["DOMRenderer.prototype._triggerEvent","DOMRenderer","dom-renderers/DOMRenderer.html#_triggerEvent","(ev)","<p>Function to be added using <code>addEventListener</code> to the corresponding\nDOMElement.</p>"],["DOMRenderer.prototype.getSizeOf","DOMRenderer","dom-renderers/DOMRenderer.html#getSizeOf","(path)","<p>getSizeOf gets the dom size of a particular DOM element.  This is\nneeded for render sizing in the scene graph.</p>"],["DOMRenderer.prototype.draw","DOMRenderer","dom-renderers/DOMRenderer.html#draw","(renderState)","<p>Executes the retrieved draw commands. Draw commands only refer to the\ncross-browser normalized <code>transform</code> property.</p>"],["DOMRenderer.prototype._assertPathLoaded","DOMRenderer","dom-renderers/DOMRenderer.html#_assertPathLoaded","()","<p>Internal helper function used for ensuring that a path is currently loaded.</p>"],["DOMRenderer.prototype._assertParentLoaded","DOMRenderer","dom-renderers/DOMRenderer.html#_assertParentLoaded","()","<p>Internal helper function used for ensuring that a parent is currently loaded.</p>"],["DOMRenderer.prototype._assertChildrenLoaded","DOMRenderer","dom-renderers/DOMRenderer.html#_assertChildrenLoaded","()","<p>Internal helper function used for ensuring that children are currently\nloaded.</p>"],["DOMRenderer.prototype._assertTargetLoaded","DOMRenderer","dom-renderers/DOMRenderer.html#_assertTargetLoaded","()",""],["DOMRenderer.prototype.findParent","DOMRenderer","dom-renderers/DOMRenderer.html#findParent","()","<p>Finds and sets the parent of the currently loaded element (path).</p>"],["DOMRenderer.prototype.findTarget","DOMRenderer","dom-renderers/DOMRenderer.html#findTarget","()","<p>Used for determining the target loaded under the current path.</p>"],["DOMRenderer.prototype.loadPath","DOMRenderer","dom-renderers/DOMRenderer.html#loadPath","(path)","<p>Loads the passed in path.</p>"],["DOMRenderer.prototype.resolveChildren","DOMRenderer","dom-renderers/DOMRenderer.html#resolveChildren","()",""],["DOMRenderer.prototype.insertEl","DOMRenderer","dom-renderers/DOMRenderer.html#insertEl","(tagName)","<p>Inserts a DOMElement at the currently loaded path, assuming no target is\nloaded. Only one DOMElement can be associated with each path.</p>"],["DOMRenderer.prototype.setProperty","DOMRenderer","dom-renderers/DOMRenderer.html#setProperty","(name, value)","<p>Sets a property on the currently loaded target.</p>"],["DOMRenderer.prototype.setSize","DOMRenderer","dom-renderers/DOMRenderer.html#setSize","(width, height)","<p>Sets the size of the currently loaded target.\nRemoves any explicit sizing constraints when passed in <code>false</code>\n(&quot;true-sizing&quot;).</p>\n<p>Invoking setSize is equivalent to a manual invocation of <code>setWidth</code> followed\nby <code>setHeight</code>.</p>"],["DOMRenderer.prototype.setWidth","DOMRenderer","dom-renderers/DOMRenderer.html#setWidth","(width)","<p>Sets the width of the currently loaded ElementCache.</p>"],["DOMRenderer.prototype.setHeight","DOMRenderer","dom-renderers/DOMRenderer.html#setHeight","()",""],["DOMRenderer.prototype.setAttribute","DOMRenderer","dom-renderers/DOMRenderer.html#setAttribute","(name, value)","<p>Sets an attribute on the currently loaded target.</p>"],["DOMRenderer.prototype.setContent","DOMRenderer","dom-renderers/DOMRenderer.html#setContent","(content)","<p>Sets the <code>innerHTML</code> content of the currently loaded target.</p>"],["DOMRenderer.prototype.setMatrix","DOMRenderer","dom-renderers/DOMRenderer.html#setMatrix","(transform)","<p>Sets the passed in transform matrix (world space). Inverts the parent's world\ntransform.</p>"],["DOMRenderer.prototype.addClass","DOMRenderer","dom-renderers/DOMRenderer.html#addClass","(domClass)","<p>Adds a class to the classList associated with the currently loaded target.</p>"],["DOMRenderer.prototype.removeClass","DOMRenderer","dom-renderers/DOMRenderer.html#removeClass","(domClass)","<p>Removes a class from the classList associated with the currently loaded\ntarget.</p>"],["DOMRenderer.prototype._stringifyMatrix","DOMRenderer","dom-renderers/DOMRenderer.html#_stringifyMatrix","()",""],["ElementCache","ElementCache","dom-renderers/ElementCache.html#ElementCache","","<p>ElementCache is being used for keeping track of an element's DOM Element,\npath, world transform, inverted parent, final transform (as being used for\nsetting the actual <code>transform</code>-property) and post render size (final size as\nbeing rendered to the DOM).</p>"],["CompositionEvent","CompositionEvent","dom-renderers/events/CompositionEvent.html#CompositionEvent","","<p>See <a href=\"http://www.w3.org/TR/2015/WD-uievents-20150428/#events-compositionevents\">UI Events (formerly DOM Level 3 Events)</a>.</p>"],["CompositionEvent.prototype.data","CompositionEvent","dom-renderers/events/CompositionEvent.html#data","",""],["CompositionEvent.prototype.constructor","CompositionEvent","dom-renderers/events/CompositionEvent.html#constructor","",""],["CompositionEvent.prototype.toString","CompositionEvent","dom-renderers/events/CompositionEvent.html#toString","()","<p>Return the name of the event type</p>"],["Event","Event","dom-renderers/events/Event.html#Event","","<p>The Event class is being used in order to normalize native DOM events.\nEvents need to be normalized in order to be serialized through the structured\ncloning algorithm used by the <code>postMessage</code> method (Web Workers).</p>\n<p>Wrapping DOM events also has the advantage of providing a consistent\ninterface for interacting with DOM events across browsers by copying over a\nsubset of the exposed properties that is guaranteed to be consistent across\nbrowsers.</p>\n<p>See <a href=\"http://www.w3.org/TR/2015/WD-uievents-20150428/#interface-Event\">UI Events (formerly DOM Level 3 Events)</a>.</p>"],["Event.prototype.type","Event","dom-renderers/events/Event.html#type","",""],["Event.prototype.defaultPrevented","Event","dom-renderers/events/Event.html#defaultPrevented","",""],["Event.prototype.timeStamp","Event","dom-renderers/events/Event.html#timeStamp","",""],["Event.prototype.value","Event","dom-renderers/events/Event.html#value","","<p>Used for exposing the current target's value.</p>"],["Event.prototype.toString","Event","dom-renderers/events/Event.html#toString","()","<p>Return the name of the event type</p>"],["FocusEvent","FocusEvent","dom-renderers/events/FocusEvent.html#FocusEvent","","<p>See <a href=\"http://www.w3.org/TR/2015/WD-uievents-20150428/#events-focusevent\">UI Events (formerly DOM Level 3 Events)</a>.</p>"],["FocusEvent.prototype.constructor","FocusEvent","dom-renderers/events/FocusEvent.html#constructor","",""],["FocusEvent.prototype.toString","FocusEvent","dom-renderers/events/FocusEvent.html#toString","()","<p>Return the name of the event type</p>"],["InputEvent","InputEvent","dom-renderers/events/InputEvent.html#InputEvent","","<p>See <a href=\"http://w3c.github.io/editing-explainer/input-events.html#idl-def-InputEvent\">Input Events</a>.</p>"],["InputEvent.prototype.inputType","InputEvent","dom-renderers/events/InputEvent.html#inputType","",""],["InputEvent.prototype.data","InputEvent","dom-renderers/events/InputEvent.html#data","",""],["InputEvent.prototype.isComposing","InputEvent","dom-renderers/events/InputEvent.html#isComposing","",""],["InputEvent.prototype.targetRange","InputEvent","dom-renderers/events/InputEvent.html#targetRange","","<p><strong>Limited browser support</strong>.</p>"],["InputEvent.prototype.constructor","InputEvent","dom-renderers/events/InputEvent.html#constructor","",""],["InputEvent.prototype.toString","InputEvent","dom-renderers/events/InputEvent.html#toString","()","<p>Return the name of the event type</p>"],["KeyboardEvent","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#KeyboardEvent","","<p>See <a href=\"http://www.w3.org/TR/2015/WD-uievents-20150428/#events-keyboardevents\">UI Events (formerly DOM Level 3 Events)</a>.</p>"],["KeyboardEvent.prototype.DOM_KEY_LOCATION_STANDARD","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#DOM_KEY_LOCATION_STANDARD","",""],["KeyboardEvent.prototype.DOM_KEY_LOCATION_LEFT","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#DOM_KEY_LOCATION_LEFT","",""],["KeyboardEvent.prototype.DOM_KEY_LOCATION_RIGHT","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#DOM_KEY_LOCATION_RIGHT","",""],["KeyboardEvent.prototype.DOM_KEY_LOCATION_NUMPAD","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#DOM_KEY_LOCATION_NUMPAD","",""],["KeyboardEvent.prototype.key","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#key","",""],["KeyboardEvent.prototype.code","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#code","",""],["KeyboardEvent.prototype.location","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#location","",""],["KeyboardEvent.prototype.ctrlKey","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#ctrlKey","",""],["KeyboardEvent.prototype.shiftKey","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#shiftKey","",""],["KeyboardEvent.prototype.altKey","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#altKey","",""],["KeyboardEvent.prototype.metaKey","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#metaKey","",""],["KeyboardEvent.prototype.repeat","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#repeat","",""],["KeyboardEvent.prototype.isComposing","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#isComposing","",""],["KeyboardEvent.prototype.keyCode","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#keyCode","",""],["KeyboardEvent.prototype.constructor","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#constructor","",""],["KeyboardEvent.prototype.toString","KeyboardEvent","dom-renderers/events/KeyboardEvent.html#toString","()","<p>Return the name of the event type</p>"],["MouseEvent.prototype.screenX","MouseEvent","dom-renderers/events/MouseEvent.html#screenX","",""],["MouseEvent.prototype.screenY","MouseEvent","dom-renderers/events/MouseEvent.html#screenY","",""],["MouseEvent.prototype.clientX","MouseEvent","dom-renderers/events/MouseEvent.html#clientX","",""],["MouseEvent.prototype.clientY","MouseEvent","dom-renderers/events/MouseEvent.html#clientY","",""],["MouseEvent.prototype.ctrlKey","MouseEvent","dom-renderers/events/MouseEvent.html#ctrlKey","",""],["MouseEvent.prototype.shiftKey","MouseEvent","dom-renderers/events/MouseEvent.html#shiftKey","",""],["MouseEvent.prototype.altKey","MouseEvent","dom-renderers/events/MouseEvent.html#altKey","",""],["MouseEvent.prototype.metaKey","MouseEvent","dom-renderers/events/MouseEvent.html#metaKey","",""],["MouseEvent.prototype.constructor","MouseEvent","dom-renderers/events/MouseEvent.html#constructor","",""],["MouseEvent.prototype.toString","MouseEvent","dom-renderers/events/MouseEvent.html#toString","()","<p>Return the name of the event type</p>"],["TouchEvent","TouchEvent","dom-renderers/events/TouchEvent.html#TouchEvent","","<p>See <a href=\"http://www.w3.org/TR/2013/REC-touch-events-20131010/#touchevent-interface\">Touch Event Interface</a>.</p>"],["TouchEvent.prototype.touches","TouchEvent","dom-renderers/events/TouchEvent.html#touches","",""],["TouchEvent.prototype.targetTouches","TouchEvent","dom-renderers/events/TouchEvent.html#targetTouches","",""],["TouchEvent.prototype.changedTouches","TouchEvent","dom-renderers/events/TouchEvent.html#changedTouches","",""],["TouchEvent.prototype.altKey","TouchEvent","dom-renderers/events/TouchEvent.html#altKey","",""],["TouchEvent.prototype.metaKey","TouchEvent","dom-renderers/events/TouchEvent.html#metaKey","",""],["TouchEvent.prototype.ctrlKey","TouchEvent","dom-renderers/events/TouchEvent.html#ctrlKey","",""],["TouchEvent.prototype.shiftKey","TouchEvent","dom-renderers/events/TouchEvent.html#shiftKey","",""],["TouchEvent.prototype.constructor","TouchEvent","dom-renderers/events/TouchEvent.html#constructor","",""],["TouchEvent.prototype.toString","TouchEvent","dom-renderers/events/TouchEvent.html#toString","()","<p>Return the name of the event type</p>"],["UIEvent","UIEvent","dom-renderers/events/UIEvent.html#UIEvent","","<p>See <a href=\"http://www.w3.org/TR/2015/WD-uievents-20150428\">UI Events (formerly DOM Level 3 Events)</a>.</p>"],["UIEvent.prototype.detail","UIEvent","dom-renderers/events/UIEvent.html#detail","",""],["UIEvent.prototype.constructor","UIEvent","dom-renderers/events/UIEvent.html#constructor","",""],["UIEvent.prototype.toString","UIEvent","dom-renderers/events/UIEvent.html#toString","()","<p>Return the name of the event type</p>"],["WheelEvent","WheelEvent","dom-renderers/events/WheelEvent.html#WheelEvent","","<p>See <a href=\"http://www.w3.org/TR/2015/WD-uievents-20150428/#events-wheelevents\">UI Events (formerly DOM Level 3 Events)</a>.</p>"],["WheelEvent.prototype.DOM_DELTA_PIXEL","WheelEvent","dom-renderers/events/WheelEvent.html#DOM_DELTA_PIXEL","",""],["WheelEvent.prototype.DOM_DELTA_LINE","WheelEvent","dom-renderers/events/WheelEvent.html#DOM_DELTA_LINE","",""],["WheelEvent.prototype.DOM_DELTA_PAGE","WheelEvent","dom-renderers/events/WheelEvent.html#DOM_DELTA_PAGE","",""],["WheelEvent.prototype.deltaX","WheelEvent","dom-renderers/events/WheelEvent.html#deltaX","",""],["WheelEvent.prototype.deltaY","WheelEvent","dom-renderers/events/WheelEvent.html#deltaY","",""],["WheelEvent.prototype.deltaZ","WheelEvent","dom-renderers/events/WheelEvent.html#deltaZ","",""],["WheelEvent.prototype.deltaMode","WheelEvent","dom-renderers/events/WheelEvent.html#deltaMode","",""],["WheelEvent.prototype.constructor","WheelEvent","dom-renderers/events/WheelEvent.html#constructor","",""],["WheelEvent.prototype.toString","WheelEvent","dom-renderers/events/WheelEvent.html#toString","()","<p>Return the name of the event type</p>"],["Mat33","Mat33","math/Mat33.html#Mat33","","<p>A 3x3 numerical matrix, represented as an array.</p>"],["Mat33.prototype.get","Mat33","math/Mat33.html#get","()","<p>Return the values in the Mat33 as an array.</p>"],["Mat33.prototype.set","Mat33","math/Mat33.html#set","(values)","<p>Set the values of the current Mat33.</p>"],["Mat33.prototype.copy","Mat33","math/Mat33.html#copy","(matrix)","<p>Copy the values of the input Mat33.</p>"],["Mat33.prototype.vectorMultiply","Mat33","math/Mat33.html#vectorMultiply","(v, output)","<p>Take this Mat33 as A, input vector V as a column vector, and return Mat33 product (A)(V).</p>"],["Mat33.prototype.multiply","Mat33","math/Mat33.html#multiply","(matrix)","<p>Multiply the provided Mat33 with the current Mat33.  Result is (this) * (matrix).</p>"],["Mat33.prototype.transpose","Mat33","math/Mat33.html#transpose","()","<p>Transposes the Mat33.</p>"],["Mat33.prototype.getDeterminant","Mat33","math/Mat33.html#getDeterminant","()","<p>The determinant of the Mat33.</p>"],["Mat33.prototype.inverse","Mat33","math/Mat33.html#inverse","()","<p>The inverse of the Mat33.</p>"],["Quaternion","Quaternion","math/Quaternion.html#Quaternion","","<p>A vector-like object used to represent rotations. If theta is the angle of\nrotation, and (x', y', z') is a normalized vector representing the axis of\nrotation, then w = cos(theta/2), x = sin(theta/2)<em>x', y = sin(theta/2)</em>y',\nand z = sin(theta/2)*z'.</p>"],["Quaternion.prototype.multiply","Quaternion","math/Quaternion.html#multiply","(q)","<p>Multiply the current Quaternion by input Quaternion q.\nLeft-handed multiplication.</p>"],["Quaternion.prototype.leftMultiply","Quaternion","math/Quaternion.html#leftMultiply","(q)","<p>Multiply the current Quaternion by input Quaternion q on the left, i.e. q * this.\nLeft-handed multiplication.</p>"],["Quaternion.prototype.rotateVector","Quaternion","math/Quaternion.html#rotateVector","(v, output)","<p>Apply the current Quaternion to input Vec3 v, according to\nv' = ~q <em> v </em> q.</p>"],["Quaternion.prototype.invert","Quaternion","math/Quaternion.html#invert","()","<p>Invert the current Quaternion.</p>"],["Quaternion.prototype.conjugate","Quaternion","math/Quaternion.html#conjugate","()","<p>Conjugate the current Quaternion.</p>"],["Quaternion.prototype.length","Quaternion","math/Quaternion.html#length","()","<p>Compute the length (norm) of the current Quaternion.</p>"],["Quaternion.prototype.normalize","Quaternion","math/Quaternion.html#normalize","()","<p>Alter the current Quaternion to be of unit length;</p>"],["Quaternion.prototype.set","Quaternion","math/Quaternion.html#set","(w, x, y, z)","<p>Set the w, x, y, z components of the current Quaternion.</p>"],["Quaternion.prototype.copy","Quaternion","math/Quaternion.html#copy","(q)","<p>Copy input Quaternion q onto the current Quaternion.</p>"],["Quaternion.prototype.clear","Quaternion","math/Quaternion.html#clear","()","<p>Reset the current Quaternion.</p>"],["Quaternion.prototype.dot","Quaternion","math/Quaternion.html#dot","(q)","<p>The dot product. Can be used to determine the cosine of the angle between\nthe two rotations, assuming both Quaternions are of unit length.</p>"],["Quaternion.prototype.slerp","Quaternion","math/Quaternion.html#slerp","(q, t, output)","<p>Spherical linear interpolation.</p>"],["Quaternion.prototype.toMatrix","Quaternion","math/Quaternion.html#toMatrix","(output)","<p>Get the Mat33 matrix corresponding to the current Quaternion.</p>"],["Quaternion.prototype.toEuler","Quaternion","math/Quaternion.html#toEuler","(output)","<p>The rotation angles about the x, y, and z axes corresponding to the\ncurrent Quaternion, when applied in the ZYX order.</p>"],["Quaternion.prototype.fromEuler","Quaternion","math/Quaternion.html#fromEuler","(x, y, z, output)","<p>The Quaternion corresponding to the Euler angles x, y, and z,\napplied in the ZYX order.</p>"],["Quaternion.prototype.fromAngleAxis","Quaternion","math/Quaternion.html#fromAngleAxis","(angle, x, y, z)","<p>Alter the current Quaternion to reflect a rotation of input angle about\ninput axis x, y, and z.</p>"],["Vec2","Vec2","math/Vec2.html#Vec2","","<p>A two-dimensional vector.</p>"],["Vec2.prototype.set","Vec2","math/Vec2.html#set","(x, y)","<p>Set the components of the current Vec2.</p>"],["Vec2.prototype.add","Vec2","math/Vec2.html#add","(v)","<p>Add the input v to the current Vec2.</p>"],["Vec2.prototype.subtract","Vec2","math/Vec2.html#subtract","(v)","<p>Subtract the input v from the current Vec2.</p>"],["Vec2.prototype.scale","Vec2","math/Vec2.html#scale","(s)","<p>Scale the current Vec2 by a scalar or Vec2.</p>"],["Vec2.prototype.rotate","Vec2","math/Vec2.html#rotate","(theta)","<p>Rotate the Vec2 counter-clockwise by theta about the z-axis.</p>"],["Vec2.prototype.dot","Vec2","math/Vec2.html#dot","(v)","<p>The dot product of of the current Vec2 with the input Vec2.</p>"],["Vec2.prototype.cross","Vec2","math/Vec2.html#cross","(v)","<p>The cross product of of the current Vec2 with the input Vec2.</p>"],["Vec2.prototype.invert","Vec2","math/Vec2.html#invert","()","<p>Preserve the magnitude but invert the orientation of the current Vec2.</p>"],["Vec2.prototype.map","Vec2","math/Vec2.html#map","(fn)","<p>Apply a function component-wise to the current Vec2.</p>"],["Vec2.prototype.length","Vec2","math/Vec2.html#length","()","<p>Get the magnitude of the current Vec2.</p>"],["Vec2.prototype.copy","Vec2","math/Vec2.html#copy","(v)","<p>Copy the input onto the current Vec2.</p>"],["Vec2.prototype.clear","Vec2","math/Vec2.html#clear","()","<p>Reset the current Vec2.</p>"],["Vec2.prototype.isZero","Vec2","math/Vec2.html#isZero","()","<p>Check whether the magnitude of the current Vec2 is exactly 0.</p>"],["Vec2.prototype.toArray","Vec2","math/Vec2.html#toArray","()","<p>The array form of the current Vec2.</p>"],["Vec3","Vec3","math/Vec3.html#Vec3","","<p>A three-dimensional vector.</p>"],["Vec3.prototype.set","Vec3","math/Vec3.html#set","(x, y, z)","<p>Set the components of the current Vec3.</p>"],["Vec3.prototype.add","Vec3","math/Vec3.html#add","(v)","<p>Add the input v to the current Vec3.</p>"],["Vec3.prototype.subtract","Vec3","math/Vec3.html#subtract","(v)","<p>Subtract the input v from the current Vec3.</p>"],["Vec3.prototype.rotateX","Vec3","math/Vec3.html#rotateX","(theta)","<p>Rotate the current Vec3 by theta clockwise about the x axis.</p>"],["Vec3.prototype.rotateY","Vec3","math/Vec3.html#rotateY","(theta)","<p>Rotate the current Vec3 by theta clockwise about the y axis.</p>"],["Vec3.prototype.rotateZ","Vec3","math/Vec3.html#rotateZ","(theta)","<p>Rotate the current Vec3 by theta clockwise about the z axis.</p>"],["Vec3.prototype.dot","Vec3","math/Vec3.html#dot","(v)","<p>The dot product of the current Vec3 with input Vec3 v.</p>"],["Vec3.prototype.cross","Vec3","math/Vec3.html#cross","()",""],["Vec3.prototype.scale","Vec3","math/Vec3.html#scale","(s)","<p>Scale the current Vec3 by a scalar.</p>"],["Vec3.prototype.invert","Vec3","math/Vec3.html#invert","()","<p>Preserve the magnitude but invert the orientation of the current Vec3.</p>"],["Vec3.prototype.map","Vec3","math/Vec3.html#map","(fn)","<p>Apply a function component-wise to the current Vec3.</p>"],["Vec3.prototype.length","Vec3","math/Vec3.html#length","()","<p>The magnitude of the current Vec3.</p>"],["Vec3.prototype.lengthSq","Vec3","math/Vec3.html#lengthSq","()","<p>The magnitude squared of the current Vec3.</p>"],["Vec3.prototype.copy","Vec3","math/Vec3.html#copy","(v)","<p>Copy the input onto the current Vec3.</p>"],["Vec3.prototype.clear","Vec3","math/Vec3.html#clear","()","<p>Reset the current Vec3.</p>"],["Vec3.prototype.isZero","Vec3","math/Vec3.html#isZero","()","<p>Check whether the magnitude of the current Vec3 is exactly 0.</p>"],["Vec3.prototype.toArray","Vec3","math/Vec3.html#toArray","()","<p>The array form of the current Vec3.</p>"],["Vec3.prototype.normalize","Vec3","math/Vec3.html#normalize","()","<p>Preserve the orientation but change the length of the current Vec3 to 1.</p>"],["Vec3.prototype.applyRotation","Vec3","math/Vec3.html#applyRotation","(q)","<p>Apply the rotation corresponding to the input (unit) Quaternion\nto the current Vec3.</p>"],["Vec3.prototype.applyMatrix","Vec3","math/Vec3.html#applyMatrix","(matrix)","<p>Apply the input Mat33 the the current Vec3.</p>"],["PhysicsEngine","PhysicsEngine","physics/PhysicsEngine.html#PhysicsEngine","","<p>Singleton PhysicsEngine object.\nManages bodies, forces, constraints.</p>"],["PhysicsEngine.prototype.on","PhysicsEngine","physics/PhysicsEngine.html#on","(key, callback)","<p>Listen for a specific event.</p>"],["PhysicsEngine.prototype.off","PhysicsEngine","physics/PhysicsEngine.html#off","(key, callback)","<p>Stop listening for a specific event.</p>"],["PhysicsEngine.prototype.trigger","PhysicsEngine","physics/PhysicsEngine.html#trigger","(key, payload)","<p>Trigger an event.</p>"],["PhysicsEngine.prototype.setOrigin","PhysicsEngine","physics/PhysicsEngine.html#setOrigin","(x, y, z)","<p>Set the origin of the world.</p>"],["PhysicsEngine.prototype.setOrientation","PhysicsEngine","physics/PhysicsEngine.html#setOrientation","(w, x, y, z)","<p>Set the orientation of the world.</p>"],["PhysicsEngine.prototype.add","PhysicsEngine","physics/PhysicsEngine.html#add","()","<p>Add a group of bodies, force, or constraints to the engine.</p>"],["PhysicsEngine.prototype.remove","PhysicsEngine","physics/PhysicsEngine.html#remove","()","<p>Remove a group of bodies, force, or constraints from the engine.</p>"],["PhysicsEngine.prototype.addBody","PhysicsEngine","physics/PhysicsEngine.html#addBody","(body)","<p>Begin tracking a body.</p>"],["PhysicsEngine.prototype.addForce","PhysicsEngine","physics/PhysicsEngine.html#addForce","(force)","<p>Begin tracking a force.</p>"],["PhysicsEngine.prototype.addConstraint","PhysicsEngine","physics/PhysicsEngine.html#addConstraint","(constraint)","<p>Begin tracking a constraint.</p>"],["PhysicsEngine.prototype.removeBody","PhysicsEngine","physics/PhysicsEngine.html#removeBody","(body)","<p>Stop tracking a body.</p>"],["PhysicsEngine.prototype.removeForce","PhysicsEngine","physics/PhysicsEngine.html#removeForce","(force)","<p>Stop tracking a force.</p>"],["PhysicsEngine.prototype.removeConstraint","PhysicsEngine","physics/PhysicsEngine.html#removeConstraint","(constraint)","<p>Stop tracking a constraint.</p>"],["PhysicsEngine.prototype.update","PhysicsEngine","physics/PhysicsEngine.html#update","(time)","<p>Update the physics system to reflect the changes since the last frame. Steps forward in increments of\nPhysicsEngine.step.</p>"],["PhysicsEngine.prototype.getTransform","PhysicsEngine","physics/PhysicsEngine.html#getTransform","(body)","<p>Transform the body position and rotation to world coordinates.</p>"],["Box","Box","physics/bodies/Box.html#Box","",""],["Box.prototype.constructor","Box","physics/bodies/Box.html#constructor","",""],["Particle","Particle","physics/bodies/Particle.html#Particle","","<p>Fundamental physical body. Maintains translational and angular momentum, position and orientation, and other properties\nsuch as size and coefficients of restitution and friction used in collision response.</p>"],["Particle.prototype.on","Particle","physics/bodies/Particle.html#on","(key, callback)","<p>Listen for a specific event.</p>"],["Particle.prototype.off","Particle","physics/bodies/Particle.html#off","(key, callback)","<p>Stop listening for a specific event.</p>"],["Particle.prototype.trigger","Particle","physics/bodies/Particle.html#trigger","(key, payload)","<p>Trigger an event.</p>"],["Particle.prototype.getRestrictions","Particle","physics/bodies/Particle.html#getRestrictions","()","<p>Getter for the restriction bitmask. Converts the restrictions to their string representation.</p>"],["Particle.prototype.setRestrictions","Particle","physics/bodies/Particle.html#setRestrictions","(transRestrictions, rotRestrictions)","<p>Setter for the particle restriction bitmask.</p>"],["Particle.prototype.getMass","Particle","physics/bodies/Particle.html#getMass","()","<p>Getter for mass</p>"],["Particle.prototype.setMass","Particle","physics/bodies/Particle.html#setMass","(mass)","<p>Set the mass of the Particle.</p>"],["Particle.prototype.getInverseMass","Particle","physics/bodies/Particle.html#getInverseMass","()","<p>Getter for inverse mass</p>"],["Particle.prototype.updateLocalInertia","Particle","physics/bodies/Particle.html#updateLocalInertia","()","<p>Resets the inertia tensor and its inverse to reflect the current shape.</p>"],["Particle.prototype.updateInertia","Particle","physics/bodies/Particle.html#updateInertia","()","<p>Updates the world inverse inertia tensor.</p>"],["Particle.prototype.getPosition","Particle","physics/bodies/Particle.html#getPosition","()","<p>Getter for position</p>"],["Particle.prototype.setPosition","Particle","physics/bodies/Particle.html#setPosition","(x, y, z)","<p>Setter for position</p>"],["Particle.prototype.getVelocity","Particle","physics/bodies/Particle.html#getVelocity","()","<p>Getter for velocity</p>"],["Particle.prototype.setVelocity","Particle","physics/bodies/Particle.html#setVelocity","(x, y, z)","<p>Setter for velocity</p>"],["Particle.prototype.getMomentum","Particle","physics/bodies/Particle.html#getMomentum","()","<p>Getter for momenutm</p>"],["Particle.prototype.setMomentum","Particle","physics/bodies/Particle.html#setMomentum","(x, y, z)","<p>Setter for momentum</p>"],["Particle.prototype.getOrientation","Particle","physics/bodies/Particle.html#getOrientation","()","<p>Getter for orientation</p>"],["Particle.prototype.setOrientation","Particle","physics/bodies/Particle.html#setOrientation","(w, x, y, z)","<p>Setter for orientation</p>"],["Particle.prototype.getAngularVelocity","Particle","physics/bodies/Particle.html#getAngularVelocity","()","<p>Getter for angular velocity</p>"],["Particle.prototype.setAngularVelocity","Particle","physics/bodies/Particle.html#setAngularVelocity","(x, y, z)","<p>Setter for angular velocity</p>"],["Particle.prototype.getAngularMomentum","Particle","physics/bodies/Particle.html#getAngularMomentum","()","<p>Getter for angular momentum</p>"],["Particle.prototype.setAngularMomentum","Particle","physics/bodies/Particle.html#setAngularMomentum","(x, y, z)","<p>Setter for angular momentum</p>"],["Particle.prototype.getForce","Particle","physics/bodies/Particle.html#getForce","()","<p>Getter for the force on the Particle</p>"],["Particle.prototype.setForce","Particle","physics/bodies/Particle.html#setForce","(x, y, z)","<p>Setter for the force on the Particle</p>"],["Particle.prototype.getTorque","Particle","physics/bodies/Particle.html#getTorque","()","<p>Getter for torque.</p>"],["Particle.prototype.setTorque","Particle","physics/bodies/Particle.html#setTorque","(x, y, z)","<p>Setter for torque.</p>"],["Particle.prototype.applyForce","Particle","physics/bodies/Particle.html#applyForce","(force)","<p>Extends Particle.applyForce with an optional argument\nto apply the force at an off-centered location, resulting in a torque.</p>"],["Particle.prototype.applyTorque","Particle","physics/bodies/Particle.html#applyTorque","(torque)","<p>Applied a torque force to a Particle, inducing a rotation.</p>"],["Particle.prototype.applyImpulse","Particle","physics/bodies/Particle.html#applyImpulse","(impulse)","<p>Applies an impulse to momentum and updates velocity.</p>"],["Particle.prototype.applyAngularImpulse","Particle","physics/bodies/Particle.html#applyAngularImpulse","(angularImpulse)","<p>Applies an angular impulse to angular momentum and updates angular velocity.</p>"],["Particle.prototype.support","Particle","physics/bodies/Particle.html#support","()","<p>Used in collision detection. The support function should accept a Vec3 direction\nand return the point on the body's shape furthest in that direction. For point particles,\nthis returns the zero vector.</p>"],["Particle.prototype.updateShape","Particle","physics/bodies/Particle.html#updateShape","()","<p>Update the body's shape to reflect current orientation. Called in Collision.\nNoop for point particles.</p>"],["Sphere","Sphere","physics/bodies/Sphere.html#Sphere","","<p>Spherical Rigid body</p>"],["Sphere.prototype.constructor","Sphere","physics/bodies/Sphere.html#constructor","",""],["Sphere.prototype.getRadius","Sphere","physics/bodies/Sphere.html#getRadius","()","<p>Getter for radius.</p>"],["Sphere.prototype.setRadius","Sphere","physics/bodies/Sphere.html#setRadius","(radius)","<p>Setter for radius.</p>"],["Sphere.prototype.updateLocalInertia","Sphere","physics/bodies/Sphere.html#updateLocalInertia","()","<p>Infers the inertia tensor.</p>"],["Sphere.prototype.support","Sphere","physics/bodies/Sphere.html#support","(direction)","<p>Returns the point on the sphere furthest in a given direction.</p>"],["Wall","Wall","physics/bodies/Wall.html#Wall","","<p>An axis-aligned boundary. Will not respond to forces or impulses.</p>"],["Wall.prototype.constructor","Wall","physics/bodies/Wall.html#constructor","",""],["Angle","Angle","physics/constraints/Angle.html#Angle","","<p>A constraint that keeps a physics body a given direction away from a given\n anchor, or another attached body.</p>"],["Angle.prototype.constructor","Angle","physics/constraints/Angle.html#constructor","",""],["Angle.prototype.init","Angle","physics/constraints/Angle.html#init","(options)","<p>Initialize the Angle. Sets defaults if a property was not already set.</p>"],["Angle.prototype.update","Angle","physics/constraints/Angle.html#update","()","<p>Warmstart the constraint and prepare calculations used in .resolve.</p>"],["Angle.prototype.resolve","Angle","physics/constraints/Angle.html#resolve","()","<p>Adds an angular impulse to a physics body's angular velocity.</p>"],["BallAndSocket","BallAndSocket","physics/constraints/BallAndSocket.html#BallAndSocket","","<p>A constraint that maintains positions and orientations with respect to a specific anchor point.</p>"],["BallAndSocket.prototype.constructor","BallAndSocket","physics/constraints/BallAndSocket.html#constructor","",""],["BallAndSocket.prototype.init","BallAndSocket","physics/constraints/BallAndSocket.html#init","()","<p>Initialize the BallAndSocket. Sets defaults if a property was not already set.</p>"],["BallAndSocket.prototype.update","BallAndSocket","physics/constraints/BallAndSocket.html#update","(time, dt)","<p>Detect violations of the constraint. Warm start the constraint, if possible.</p>"],["BallAndSocket.prototype.resolve","BallAndSocket","physics/constraints/BallAndSocket.html#resolve","()","<p>Apply impulses to resolve the constraint.</p>"],["Collision","Collision","physics/constraints/Collision.html#Collision","","<p>Ridid body Elastic Collision</p>"],["Collision.prototype.constructor","Collision","physics/constraints/Collision.html#constructor","",""],["Collision.prototype.init","Collision","physics/constraints/Collision.html#init","()","<p>Initialize the Collision tracker. Sets defaults if a property was not already set.</p>"],["Collision.prototype.update","Collision","physics/constraints/Collision.html#update","(time, dt)","<p>Collison detection. Updates the existing contact manifolds, runs the broadphase, and performs narrowphase\ncollision detection. Warm starts the contacts based on the results of the previous physics frame\nand prepares necesssary calculations for the resolution.</p>"],["Collision.prototype.resolve","Collision","physics/constraints/Collision.html#resolve","(time, dt)","<p>Apply impulses to resolve all Contact constraints.</p>"],["Collision.prototype.addTarget","Collision","physics/constraints/Collision.html#addTarget","(target)","<p>Add a target or targets to the collision system.</p>"],["Collision.prototype.removeTarget","Collision","physics/constraints/Collision.html#removeTarget","(target)","<p>Remove a target or targets from the collision system.</p>"],["Collision.prototype.applyNarrowPhase","Collision","physics/constraints/Collision.html#applyNarrowPhase","(targets)","<p>Narrowphase collision detection,\nregisters the Contact constraints for colliding bodies.</p>\n<p>Will detect the type of bodies in the collision.</p>"],["Constraint","Constraint","physics/constraints/Constraint.html#Constraint","","<p>Base Constraint class to be used in the Physics\nSubclass this class to implement a constraint</p>"],["Constraint.prototype.setOptions","Constraint","physics/constraints/Constraint.html#setOptions","(options)","<p>Decorates the Constraint with the options object.</p>"],["Constraint.prototype.init","Constraint","physics/constraints/Constraint.html#init","(options)","<p>Method invoked upon instantiation and the setting of options.</p>"],["Constraint.prototype.update","Constraint","physics/constraints/Constraint.html#update","(time, dt)","<p>Detect violations of the constraint. Warm start the constraint, if possible.</p>"],["Constraint.prototype.resolve","Constraint","physics/constraints/Constraint.html#resolve","(time, dt)","<p>Apply impulses to resolve the constraint.</p>"],["Curve","Curve","physics/constraints/Curve.html#Curve","","<p>A constraint that keeps a physics body on a given implicit curve.</p>"],["Curve.prototype.constructor","Curve","physics/constraints/Curve.html#constructor","",""],["Curve.prototype.init","Curve","physics/constraints/Curve.html#init","()","<p>Initialize the Curve. Sets defaults if a property was not already set.</p>"],["Curve.prototype.update","Curve","physics/constraints/Curve.html#update","(time, dt)","<p>Warmstart the constraint and prepare calculations used in the .resolve step.</p>"],["Curve.prototype.resolve","Curve","physics/constraints/Curve.html#resolve","()","<p>Adds a curve impulse to a physics body.</p>"],["Direction","Direction","physics/constraints/Direction.html#Direction","","<p>A constraint that maintains the direction of one body from another.</p>"],["Direction.prototype.constructor","Direction","physics/constraints/Direction.html#constructor","",""],["Direction.prototype.init","Direction","physics/constraints/Direction.html#init","()","<p>Initialize the Direction. Sets defaults if a property was not already set.</p>"],["Direction.prototype.update","Direction","physics/constraints/Direction.html#update","(time, dt)","<p>Warmstart the constraint and prepare calculations used in .resolve.</p>"],["Direction.prototype.resolve","Direction","physics/constraints/Direction.html#resolve","()","<p>Adds an impulse to a physics body's velocity due to the constraint</p>"],["Distance","Distance","physics/constraints/Distance.html#Distance","","<p>A constraint that keeps two bodies within a certain distance.</p>"],["Distance.prototype.constructor","Distance","physics/constraints/Distance.html#constructor","",""],["Distance.prototype.init","Distance","physics/constraints/Distance.html#init","()","<p>Initialize the Distance. Sets defaults if a property was not already set.</p>"],["Distance.prototype.update","Distance","physics/constraints/Distance.html#update","(time, dt)","<p>Detect violations of the constraint. Warm start the constraint, if possible.</p>"],["Distance.prototype.resolve","Distance","physics/constraints/Distance.html#resolve","()","<p>Apply impulses to resolve the constraint.</p>"],["Hinge","Hinge","physics/constraints/Hinge.html#Hinge","","<p>A constraint that confines two bodies to the plane defined by the axis of the hinge.</p>"],["Hinge.prototype.constructor","Hinge","physics/constraints/Hinge.html#constructor","",""],["Hinge.prototype.init","Hinge","physics/constraints/Hinge.html#init","()","<p>Initialize the Hinge. Sets defaults if a property was not already set.</p>"],["Hinge.prototype.update","Hinge","physics/constraints/Hinge.html#update","(time, dt)","<p>Detect violations of the constraint. Warm start the constraint, if possible.</p>"],["Hinge.prototype.resolve","Hinge","physics/constraints/Hinge.html#resolve","()","<p>Apply impulses to resolve the constraint.</p>"],["AABB","AABB","physics/constraints/collision/AABB.html#AABB","","<p>Axis-aligned bounding box. Used in collision broadphases.</p>"],["AABB.prototype.update","AABB","physics/constraints/collision/AABB.html#update","()","<p>Update the bounds to reflect the current orientation and position of the parent Body.</p>"],["BruteForce","BruteForce","physics/constraints/collision/BruteForce.html#BruteForce","","<p>The most simple yet computationally intensive broad-phase. Immediately passes its targets to the narrow-phase,\nresulting in an O(n^2) process. Only feasible for a relatively small number of bodies.</p>"],["BruteForce.prototype.add","BruteForce","physics/constraints/collision/BruteForce.html#add","(body)","<p>Start tracking a Particle.</p>"],["BruteForce.prototype.update","BruteForce","physics/constraints/collision/BruteForce.html#update","()","<p>Immediately returns an array of possible collisions.</p>"],["SweepAndPrune","SweepAndPrune","physics/constraints/collision/SweepAndPrune.html#SweepAndPrune","","<p>Persistant object maintaining sorted lists of AABB endpoints used in a sweep-and-prune broadphase.\nUsed to accelerate collision detection.\nhttp://en.wikipedia.org/wiki/Sweep_and_prune</p>"],["SweepAndPrune.prototype.add","SweepAndPrune","physics/constraints/collision/SweepAndPrune.html#add","(body)","<p>Start tracking a body in the broad-phase.</p>"],["SweepAndPrune.prototype.remove","SweepAndPrune","physics/constraints/collision/SweepAndPrune.html#remove","(body)","<p>Stop tracking a body in the broad-phase.</p>"],["SweepAndPrune.prototype.update","SweepAndPrune","physics/constraints/collision/SweepAndPrune.html#update","()","<p>Update the endpoints of the tracked AABB's and resort the endpoint lists accordingly. Uses an insertion sort,\nwhere swaps during the sort are taken to signify a potential change in overlap status for the two\nrelevant AABB's. Returns pairs of overlapping AABB's.</p>"],["Drag","Drag","physics/forces/Drag.html#Drag","","<p>Use drag to oppose momentum of a moving object</p>"],["Drag.prototype.constructor","Drag","physics/forces/Drag.html#constructor","",""],["Drag.prototype.init","Drag","physics/forces/Drag.html#init","(options)","<p>Initialize the Force. Sets defaults if a property was not already set.</p>"],["Drag.prototype.update","Drag","physics/forces/Drag.html#update","()","<p>Apply the force.</p>"],["Force","Force","physics/forces/Force.html#Force","","<p>Abstract force manager to apply forces to targets.</p>"],["Force.prototype.setOptions","Force","physics/forces/Force.html#setOptions","(options)","<p>Decorates the Force with the options object.</p>"],["Force.prototype.addTarget","Force","physics/forces/Force.html#addTarget","(target)","<p>Add a target or targets to the Force.</p>"],["Force.prototype.removeTarget","Force","physics/forces/Force.html#removeTarget","(target)","<p>Remove a target or targets from the Force.</p>"],["Force.prototype.init","Force","physics/forces/Force.html#init","(options)","<p>Method invoked upon instantiation and the setting of options.</p>"],["Force.prototype.update","Force","physics/forces/Force.html#update","(time, dt)","<p>Apply forces on each target.</p>"],["Gravity1D","Gravity1D","physics/forces/Gravity1D.html#Gravity1D","","<p>Force that pulls all objects in a direction with constant acceleration</p>"],["Gravity1D.prototype.constructor","Gravity1D","physics/forces/Gravity1D.html#constructor","",""],["Gravity1D.prototype.init","Gravity1D","physics/forces/Gravity1D.html#init","(options)","<p>Initialize the Force. Sets defaults if a property was not already set.</p>"],["Gravity1D.prototype.update","Gravity1D","physics/forces/Gravity1D.html#update","()","<p>Apply the force.</p>"],["Gravity3D","Gravity3D","physics/forces/Gravity3D.html#Gravity3D","","<p>An inverse square force dependent on the masses of the source and targets.</p>"],["Gravity3D.prototype.constructor","Gravity3D","physics/forces/Gravity3D.html#constructor","",""],["Gravity3D.prototype.init","Gravity3D","physics/forces/Gravity3D.html#init","()","<p>Initialize the Force. Sets defaults if a property was not already set.</p>"],["Gravity3D.prototype.update","Gravity3D","physics/forces/Gravity3D.html#update","()","<p>Apply the force.</p>"],["RotationalDrag","RotationalDrag","physics/forces/RotationalDrag.html#RotationalDrag","","<p>A behavior that slows angular velocity by applying torque.</p>"],["RotationalDrag.prototype.constructor","RotationalDrag","physics/forces/RotationalDrag.html#constructor","",""],["RotationalDrag.prototype.init","RotationalDrag","physics/forces/RotationalDrag.html#init","()","<p>Initialize the Force. Sets defaults if a property was not already set.</p>"],["RotationalDrag.prototype.update","RotationalDrag","physics/forces/RotationalDrag.html#update","()","<p>Adds a rotational drag force to a physics body's torque accumulator.</p>"],["RotationalSpring","RotationalSpring","physics/forces/RotationalSpring.html#RotationalSpring","","<p>A spring-like behavior that attempts to enforce a specfic orientation by applying torque.</p>"],["RotationalSpring.prototype.constructor","RotationalSpring","physics/forces/RotationalSpring.html#constructor","",""],["RotationalSpring.prototype.init","RotationalSpring","physics/forces/RotationalSpring.html#init","(options)","<p>Initialize the Force. Sets defaults if a property was not already set.</p>"],["RotationalSpring.prototype.update","RotationalSpring","physics/forces/RotationalSpring.html#update","()","<p>Adds a torque force to a physics body's torque accumulator.</p>"],["Spring","Spring","physics/forces/Spring.html#Spring","","<p>A force that accelerates a Particle towards a specific anchor point. Can be anchored to\na Vec3 or another source Particle.</p>"],["Spring.prototype.constructor","Spring","physics/forces/Spring.html#constructor","",""],["Spring.prototype.init","Spring","physics/forces/Spring.html#init","(options)","<p>Initialize the Force. Sets defaults if a property was not already set.</p>"],["Spring.prototype.update","Spring","physics/forces/Spring.html#update","()","<p>Apply the force.</p>"],["Compositor","Compositor","renderers/Compositor.html#Compositor","","<p>Instantiates a new Compositor.\nThe Compositor receives draw commands frm the UIManager and routes the to the\nrespective context objects.</p>\n<p>Upon creation, it injects a stylesheet used for styling the individual\nrenderers used in the context objects.</p>"],["Compositor.prototype._contexts","Compositor","renderers/Compositor.html#_contexts","",""],["Compositor.prototype._outCommands","Compositor","renderers/Compositor.html#_outCommands","",""],["Compositor.prototype._inCommands","Compositor","renderers/Compositor.html#_inCommands","",""],["Compositor.prototype._time","Compositor","renderers/Compositor.html#_time","",""],["Compositor.prototype._resized","Compositor","renderers/Compositor.html#_resized","",""],["Compositor.prototype.onResize","Compositor","renderers/Compositor.html#onResize","()",""],["Compositor.prototype.getTime","Compositor","renderers/Compositor.html#getTime","()","<p>Retrieves the time being used by the internal clock managed by\n<code>FamousEngine</code>.</p>\n<p>The time is being passed into core by the Engine through the UIManager.\nSince core has the ability to scale the time, the time needs to be passed\nback to the rendering system.</p>"],["Compositor.prototype.sendEvent","Compositor","renderers/Compositor.html#sendEvent","(path, ev, payload)","<p>Schedules an event to be sent the next time the out command queue is being\nflushed.</p>"],["Compositor.prototype.sendResize","Compositor","renderers/Compositor.html#sendResize","(selector, size)","<p>Internal helper method used for notifying externally\nresized contexts (e.g. by resizing the browser window).</p>"],["Compositor.prototype.handleWith","Compositor","renderers/Compositor.html#handleWith","(iterator, commands)","<p>Internal helper method used by <code>drawCommands</code>.\nSubsequent commands are being associated with the node defined the the path\nfollowing the <code>WITH</code> command.</p>"],["Compositor.prototype.getOrSetContext","Compositor","renderers/Compositor.html#getOrSetContext","(selector)","<p>Retrieves the top-level Context associated with the passed in document\nquery selector. If no such Context exists, a new one will be instantiated.</p>"],["Compositor.prototype.getContext","Compositor","renderers/Compositor.html#getContext","(selector)","<p>Retrieves a context object registered under the passed in selector.</p>"],["Compositor.prototype.drawCommands","Compositor","renderers/Compositor.html#drawCommands","()","<p>Processes the previously via <code>receiveCommands</code> updated incoming &quot;in&quot;\ncommand queue.\nCalled by UIManager on a frame by frame basis.</p>"],["Compositor.prototype.updateSize","Compositor","renderers/Compositor.html#updateSize","()","<p>Updates the size of all previously registered context objects.\nThis results into CONTEXT_RESIZE events being sent and the root elements\nused by the individual renderers being resized to the the DOMRenderer's root\nsize.</p>"],["Compositor.prototype.receiveCommands","Compositor","renderers/Compositor.html#receiveCommands","(commands)","<p>Used by ThreadManager to update the internal queue of incoming commands.\nReceiving commands does not immediately start the rendering process.</p>"],["Compositor.prototype.giveSizeFor","Compositor","renderers/Compositor.html#giveSizeFor","(iterator, commands)","<p>Internal helper method used by <code>drawCommands</code>.</p>"],["Compositor.prototype.clearCommands","Compositor","renderers/Compositor.html#clearCommands","()","<p>Flushes the queue of outgoing &quot;out&quot; commands.\nCalled by ThreadManager.</p>"],["Context","Context","renderers/Context.html#Context","","<p>Context is a render layer with its own WebGLRenderer and DOMRenderer.\nIt is the interface between the Compositor which receives commands\nand the renderers that interpret them. It also relays information to\nthe renderers about resizing.</p>\n<p>The DOMElement at the given query selector is used as the root. A\nnew DOMElement is appended to this root element, and used as the\nparent element for all Famous DOM rendering at this context. A\ncanvas is added and used for all WebGL rendering at this context.</p>"],["Context.prototype._compositor","Context","renderers/Context.html#_compositor","",""],["Context.prototype._rootEl","Context","renderers/Context.html#_rootEl","",""],["Context.prototype._selector","Context","renderers/Context.html#_selector","",""],["Context.prototype._selector","Context","renderers/Context.html#_selector","",""],["Context.prototype._webGLRenderer","Context","renderers/Context.html#_webGLRenderer","",""],["Context.prototype._domRenderer","Context","renderers/Context.html#_domRenderer","",""],["Context.prototype._canvasEl","Context","renderers/Context.html#_canvasEl","",""],["Context.prototype._renderState","Context","renderers/Context.html#_renderState","",""],["Context.prototype._size","Context","renderers/Context.html#_size","",""],["Context.prototype._meshTransform","Context","renderers/Context.html#_meshTransform","",""],["Context.prototype._meshSize","Context","renderers/Context.html#_meshSize","",""],["Context.prototype._initDOM","Context","renderers/Context.html#_initDOM","",""],["Context.prototype._commandCallbacks","Context","renderers/Context.html#_commandCallbacks","",""],["Context.prototype.updateSize","Context","renderers/Context.html#updateSize","()","<p>Queries DOMRenderer size and updates canvas size. Relays size information to\nWebGLRenderer.</p>"],["Context.prototype.draw","Context","renderers/Context.html#draw","()","<p>Draw function called after all commands have been handled for current frame.\nIssues draw commands to all renderers with current renderState.</p>"],["Context.prototype._initDOMRenderer","Context","renderers/Context.html#_initDOMRenderer","()","<p>Initializes the DOMRenderer by creating a root DIV element and appending it\nto the context.</p>"],["Context.prototype.getRootSize","Context","renderers/Context.html#getRootSize","()",""],["Context.prototype.initCommandCallbacks","Context","renderers/Context.html#initCommandCallbacks","()",""],["Context.prototype._initWebGLRenderer","Context","renderers/Context.html#_initWebGLRenderer","()","<p>Initializes the WebGLRenderer and updates it initial size.</p>\n<p>The Initialization process consists of the following steps:</p>\n<ol>\n<li>A new <code>&lt;canvas&gt;</code> element is being created and appended to the root element.</li>\n<li>The WebGLRenderer is being instantiated.</li>\n<li>The size of the WebGLRenderer is being updated.</li>\n</ol>"],["Context.prototype.getRootSize","Context","renderers/Context.html#getRootSize","()","<p>Gets the size of the parent element of the DOMRenderer for this context.</p>"],["Context.prototype.checkInit","Context","renderers/Context.html#checkInit","()","<p>Initializes the context if the <code>READY</code> command has been received earlier.</p>"],["Context.prototype.receive","Context","renderers/Context.html#receive","(path, commands, iterator)","<p>Handles delegation of commands to renderers of this context.</p>"],["Context.prototype.getDOMRenderer","Context","renderers/Context.html#getDOMRenderer","()","<p>Getter method used for retrieving the used DOMRenderer.</p>"],["Context.prototype.getWebGLRenderer","Context","renderers/Context.html#getWebGLRenderer","()","<p>Getter method used for retrieving the used WebGLRenderer (if any).</p>"],["UIManager","UIManager","renderers/UIManager.html#UIManager","","<p>The UIManager is being updated by an Engine by consecutively calling its\n<code>update</code> method. It can either manage a real Web-Worker or the global\nFamousEngine core singleton.</p>"],["UIManager.prototype._thread","UIManager","renderers/UIManager.html#_thread","",""],["UIManager.prototype._compositor","UIManager","renderers/UIManager.html#_compositor","",""],["UIManager.prototype._renderLoop","UIManager","renderers/UIManager.html#_renderLoop","",""],["UIManager.prototype.getThread","UIManager","renderers/UIManager.html#getThread","()","<p>Returns the thread being used by the UIManager.\nThis could either be an an actual web worker or a <code>FamousEngine</code> singleton.</p>"],["UIManager.prototype.getCompositor","UIManager","renderers/UIManager.html#getCompositor","()","<p>Returns the compositor being used by this UIManager.</p>"],["UIManager.prototype.getEngine","UIManager","renderers/UIManager.html#getEngine","()","<p>Returns the engine being used by this UIManager.</p>"],["UIManager.prototype.getRenderLoop","UIManager","renderers/UIManager.html#getRenderLoop","()","<p>Returns the render loop currently being used by the UIManager.</p>"],["UIManager.prototype.update","UIManager","renderers/UIManager.html#update","(time)","<p>Update method being invoked by the Engine on every <code>requestAnimationFrame</code>.\nUsed for updating the notion of time within the managed thread by sending\na FRAME command and sending messages to</p>"],["Transitionable","Transitionable","transitions/Transitionable.html#Transitionable","","<p>A state maintainer for a smooth transition between\n   numerically-specified states. Example numeric states include floats and\n   arrays of floats objects.</p>\n<p>An initial state is set with the constructor or using\n    {@link Transitionable#from}. Subsequent transitions consist of an\n    intermediate state, easing curve, duration and callback. The final state\n    of each transition is the initial state of the subsequent one. Calls to\n    {@link Transitionable#get} provide the interpolated state along the way.</p>\n<p>Note that there is no event loop here - calls to {@link Transitionable#get}\n   are the only way to find state projected to the current (or provided)\n   time and are the only way to trigger callbacks and mutate the internal\n   transition queue.</p>"],["Transitionable.prototype._queue","Transitionable","transitions/Transitionable.html#_queue","",""],["Transitionable.prototype._from","Transitionable","transitions/Transitionable.html#_from","",""],["Transitionable.prototype._state","Transitionable","transitions/Transitionable.html#_state","",""],["Transitionable.prototype._startedAt","Transitionable","transitions/Transitionable.html#_startedAt","",""],["Transitionable.prototype._pausedAt","Transitionable","transitions/Transitionable.html#_pausedAt","",""],["Transitionable.prototype.to","Transitionable","transitions/Transitionable.html#to","()",""],["Transitionable.prototype.from","Transitionable","transitions/Transitionable.html#from","()",""],["Transitionable.prototype.delay","Transitionable","transitions/Transitionable.html#delay","()",""],["Transitionable.prototype.override","Transitionable","transitions/Transitionable.html#override","()",""],["Transitionable.prototype._interpolate","Transitionable","transitions/Transitionable.html#_interpolate","()",""],["Transitionable.prototype._sync","Transitionable","transitions/Transitionable.html#_sync","()",""],["Transitionable.prototype.get","Transitionable","transitions/Transitionable.html#get","()",""],["Transitionable.prototype.isActive","Transitionable","transitions/Transitionable.html#isActive","()",""],["Transitionable.prototype.halt","Transitionable","transitions/Transitionable.html#halt","()",""],["Transitionable.prototype.pause","Transitionable","transitions/Transitionable.html#pause","()",""],["Transitionable.prototype.isPaused","Transitionable","transitions/Transitionable.html#isPaused","()",""],["Transitionable.prototype.resume","Transitionable","transitions/Transitionable.html#resume","()",""],["Transitionable.prototype.reset","Transitionable","transitions/Transitionable.html#reset","()",""],["Transitionable.prototype.set","Transitionable","transitions/Transitionable.html#set","()",""],["CallbackStore","CallbackStore","utilities/CallbackStore.html#CallbackStore","","<p>A lightweight, featureless EventEmitter.</p>"],["CallbackStore.prototype._events","CallbackStore","utilities/CallbackStore.html#_events","",""],["CallbackStore.prototype.on","CallbackStore","utilities/CallbackStore.html#on","()",""],["CallbackStore.prototype.off","CallbackStore","utilities/CallbackStore.html#off","()",""],["CallbackStore.prototype.trigger","CallbackStore","utilities/CallbackStore.html#trigger","()",""],["Color","Color","utilities/Color.html#Color","",""],["Color.prototype._r","Color","utilities/Color.html#_r","",""],["Color.prototype._g","Color","utilities/Color.html#_g","",""],["Color.prototype._b","Color","utilities/Color.html#_b","",""],["Color.prototype._opacity","Color","utilities/Color.html#_opacity","",""],["Color.prototype.toString","Color","utilities/Color.html#toString","()","<p>Returns the definition of the Class: 'Color'.</p>"],["Color.prototype.set","Color","utilities/Color.html#set","(color, transition, cb)","<p>Sets the color. It accepts an optional transition parameter and callback.\nset(Color, transition, callback)\nset('#000000', transition, callback)\nset('black', transition, callback)\nset([r, g, b], transition, callback)</p>"],["Color.prototype.isActive","Color","utilities/Color.html#isActive","()","<p>Returns whether Color is still in an animating (transitioning) state.</p>"],["Color.prototype.halt","Color","utilities/Color.html#halt","()","<p>Halt transition at current state and erase all pending actions.</p>"],["Color.prototype.changeTo","Color","utilities/Color.html#changeTo","(color, transition, cb)","<p>Sets the color values from another Color instance.</p>"],["Color.prototype.setColor","Color","utilities/Color.html#setColor","(name, transition, cb)","<p>Sets the color based on static color names.</p>"],["Color.prototype.getColor","Color","utilities/Color.html#getColor","(option)","<p>Returns the color in either RGB or with the requested format.</p>"],["Color.prototype.setR","Color","utilities/Color.html#setR","(r, transition, cb)","<p>Sets the R of the Color's RGB</p>"],["Color.prototype.setG","Color","utilities/Color.html#setG","(g, transition, cb)","<p>Sets the G of the Color's RGB</p>"],["Color.prototype.setB","Color","utilities/Color.html#setB","(b, transition, cb)","<p>Sets the B of the Color's RGB</p>"],["Color.prototype.setOpacity","Color","utilities/Color.html#setOpacity","(opacity, transition, cb)","<p>Sets opacity value</p>"],["Color.prototype.setRGB","Color","utilities/Color.html#setRGB","(r, g, b, transition, cb)","<p>Sets RGB</p>"],["Color.prototype.getR","Color","utilities/Color.html#getR","()","<p>Returns R of RGB</p>"],["Color.prototype.getG","Color","utilities/Color.html#getG","()","<p>Returns G of RGB</p>"],["Color.prototype.getB","Color","utilities/Color.html#getB","()","<p>Returns B of RGB</p>"],["Color.prototype.getOpacity","Color","utilities/Color.html#getOpacity","()","<p>Returns Opacity value</p>"],["Color.prototype.getRGB","Color","utilities/Color.html#getRGB","()","<p>Returns RGB</p>"],["Color.prototype.getNormalizedRGB","Color","utilities/Color.html#getNormalizedRGB","()","<p>Returns Normalized RGB</p>"],["Color.prototype.getNormalizedRGBA","Color","utilities/Color.html#getNormalizedRGBA","()","<p>Returns Normalized RGBA</p>"],["Color.prototype.getHex","Color","utilities/Color.html#getHex","()","<p>Returns the current color in Hex</p>"],["Color.prototype.setHex","Color","utilities/Color.html#setHex","(hex, transition, cb)","<p>Sets color using Hex</p>"],["KeyCodes","KeyCodes","utilities/KeyCodes.html#KeyCodes","","<p>Collection to map keyboard codes in plain english</p>"],["DynamicGeometry","DynamicGeometry","webgl-geometries/DynamicGeometry.html#DynamicGeometry","","<p>DynamicGeometry is a component that defines and manages data\n(vertex data and attributes) that is used to draw to WebGL.</p>"],["DynamicGeometry.prototype.getVertexBuffer","DynamicGeometry","webgl-geometries/DynamicGeometry.html#getVertexBuffer","(bufferName)","<p>Gets the buffer object based on buffer name. Throws error\nif bufferName is not provided.</p>"],["DynamicGeometry.prototype.setVertexBuffer","DynamicGeometry","webgl-geometries/DynamicGeometry.html#setVertexBuffer","(bufferName, value, size)","<p>Sets a vertex buffer with given name to input value. Registers a new\nbuffer if one does not exist with given name.</p>"],["DynamicGeometry.prototype.fromGeometry","DynamicGeometry","webgl-geometries/DynamicGeometry.html#fromGeometry","(geometry)","<p>Copies and sets all buffers from another geometry instance.</p>"],["DynamicGeometry.prototype.setVertexPositions","DynamicGeometry","webgl-geometries/DynamicGeometry.html#setVertexPositions","(value)","<p>Set the positions of the vertices in this geometry.</p>"],["DynamicGeometry.prototype.setNormals","DynamicGeometry","webgl-geometries/DynamicGeometry.html#setNormals","(value)","<p>Set the normals on this geometry.</p>"],["DynamicGeometry.prototype.setTextureCoords","DynamicGeometry","webgl-geometries/DynamicGeometry.html#setTextureCoords","(value)","<p>Set the texture coordinates on this geometry.</p>"],["DynamicGeometry.prototype.setIndices","DynamicGeometry","webgl-geometries/DynamicGeometry.html#setIndices","(value)","<p>Set the texture coordinates on this geometry.</p>"],["DynamicGeometry.prototype.setDrawType","DynamicGeometry","webgl-geometries/DynamicGeometry.html#setDrawType","(value)","<p>Set the WebGL drawing primitive for this geometry.</p>"],["DynamicGeometry.prototype.getVertexPositions","DynamicGeometry","webgl-geometries/DynamicGeometry.html#getVertexPositions","()","<p>Returns the 'pos' vertex buffer of the geometry.</p>"],["DynamicGeometry.prototype.getNormals","DynamicGeometry","webgl-geometries/DynamicGeometry.html#getNormals","()","<p>Returns the 'normal' vertex buffer of the geometry.</p>"],["DynamicGeometry.prototype.getTextureCoords","DynamicGeometry","webgl-geometries/DynamicGeometry.html#getTextureCoords","()","<p>Returns the 'textureCoord' vertex buffer of the geometry.</p>"],["Geometry","Geometry","webgl-geometries/Geometry.html#Geometry","","<p>Geometry is a component that defines and manages data\n(vertex data and attributes) that is used to draw to WebGL.</p>"],["Geometry.prototype.options","Geometry","webgl-geometries/Geometry.html#options","",""],["Geometry.prototype.DEFAULT_BUFFER_SIZE","Geometry","webgl-geometries/Geometry.html#DEFAULT_BUFFER_SIZE","",""],["Geometry.prototype.spec","Geometry","webgl-geometries/Geometry.html#spec","",""],["GeometryHelper","GeometryHelper","webgl-geometries/GeometryHelper.html#GeometryHelper","","<p>A helper object used to calculate buffers for complicated geometries.\nTailored for the WebGLRenderer, used by most primitives.</p>"],["Circle","Circle","webgl-geometries/primitives/Circle.html#Circle","","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["Cylinder","Cylinder","webgl-geometries/primitives/Cylinder.html#Cylinder","","<p>This class creates a new geometry instance and sets\nits vertex positions, texture coordinates, normals,\nand indices to based on the primitive.</p>"],["GeodesicSphere","GeodesicSphere","webgl-geometries/primitives/GeodesicSphere.html#GeodesicSphere","","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["Icosahedron","Icosahedron","webgl-geometries/primitives/Icosahedron.html#Icosahedron","","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["ParametricCone","ParametricCone","webgl-geometries/primitives/ParametricCone.html#ParametricCone","","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["Plane","Plane","webgl-geometries/primitives/Plane.html#Plane","","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["Tetrahedron","Tetrahedron","webgl-geometries/primitives/Tetrahedron.html#Tetrahedron","","<p>This function generates custom buffers and passes them to\na new static geometry, which is returned to the user.</p>"],["Torus","Torus","webgl-geometries/primitives/Torus.html#Torus","","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["Triangle","Triangle","webgl-geometries/primitives/Triangle.html#Triangle","","<p>This function returns a new static geometry, which is passed\ncustom buffer data.</p>"],["Material","Material","webgl-materials/Material.html#Material","","<p>Material is a public class that composes a material-graph out of expressions</p>"],["Material.prototype.name","Material","webgl-materials/Material.html#name","",""],["Material.prototype.chunk","Material","webgl-materials/Material.html#chunk","",""],["Material.prototype.inputs","Material","webgl-materials/Material.html#inputs","",""],["Material.prototype.uniforms","Material","webgl-materials/Material.html#uniforms","",""],["Material.prototype.varyings","Material","webgl-materials/Material.html#varyings","",""],["Material.prototype.attributes","Material","webgl-materials/Material.html#attributes","",""],["Material.prototype.texture","Material","webgl-materials/Material.html#texture","",""],["Material.prototype._id","Material","webgl-materials/Material.html#_id","",""],["Material.prototype.invalidations","Material","webgl-materials/Material.html#invalidations","",""],["Material.prototype.__isAMaterial__","Material","webgl-materials/Material.html#__isAMaterial__","",""],["Material.prototype.setUniform","Material","webgl-materials/Material.html#setUniform","()",""],["Mesh","Mesh","webgl-renderables/Mesh.html#Mesh","","<p>The Mesh class is responsible for providing the API for how\na RenderNode will interact with the WebGL API by adding\na set of commands to the renderer.</p>"],["Mesh.prototype._node","Mesh","webgl-renderables/Mesh.html#_node","",""],["Mesh.prototype._changeQueue","Mesh","webgl-renderables/Mesh.html#_changeQueue","",""],["Mesh.prototype._initialized","Mesh","webgl-renderables/Mesh.html#_initialized","",""],["Mesh.prototype._requestingUpdate","Mesh","webgl-renderables/Mesh.html#_requestingUpdate","",""],["Mesh.prototype._inDraw","Mesh","webgl-renderables/Mesh.html#_inDraw","",""],["Mesh.prototype.value","Mesh","webgl-renderables/Mesh.html#value","",""],["Mesh.prototype._id","Mesh","webgl-renderables/Mesh.html#_id","",""],["Mesh.prototype.setDrawOptions","Mesh","webgl-renderables/Mesh.html#setDrawOptions","(options)","<p>Pass custom options to Mesh, such as a 3 element map\nwhich displaces the position of each vertex in world space.</p>"],["Mesh.prototype.getDrawOptions","Mesh","webgl-renderables/Mesh.html#getDrawOptions","()","<p>Get the mesh's custom options.</p>"],["Mesh.prototype.setGeometry","Mesh","webgl-renderables/Mesh.html#setGeometry","(geometry, options)","<p>Assigns a geometry to be used for this mesh. Sets the geometry from either\na 'Geometry' or a valid primitive (string) name. Queues the set command for this\ngeometry and looks for buffers to send to the renderer to update geometry.</p>"],["Mesh.prototype.getGeometry","Mesh","webgl-renderables/Mesh.html#getGeometry","()","<p>Gets the geometry of a mesh.</p>"],["Mesh.prototype.setBaseColor","Mesh","webgl-renderables/Mesh.html#setBaseColor","(color)","<p>Changes the color of Mesh, passing either a material expression or\ncolor using the 'Color' utility component.</p>"],["Mesh.prototype.getBaseColor","Mesh","webgl-renderables/Mesh.html#getBaseColor","()","<p>Returns either the material expression or the color instance of Mesh.</p>"],["Mesh.prototype.setFlatShading","Mesh","webgl-renderables/Mesh.html#setFlatShading","(bool)","<p>Change whether the Mesh is affected by light. Default is true.</p>"],["Mesh.prototype.getFlatShading","Mesh","webgl-renderables/Mesh.html#getFlatShading","()","<p>Returns a boolean for whether Mesh is affected by light.</p>"],["Mesh.prototype.setNormals","Mesh","webgl-renderables/Mesh.html#setNormals","(materialExpression)","<p>Defines a 3-element map which is used to provide significant physical\ndetail to the surface by perturbing the facing direction of each individual\npixel.</p>"],["Mesh.prototype.getNormals","Mesh","webgl-renderables/Mesh.html#getNormals","(materialExpression)","<p>Returns the Normals expression of Mesh</p>"],["Mesh.prototype.setGlossiness","Mesh","webgl-renderables/Mesh.html#setGlossiness","(glossiness, strength)","<p>Defines the glossiness of the mesh from either a material expression or a\nscalar value</p>"],["Mesh.prototype.getGlossiness","Mesh","webgl-renderables/Mesh.html#getGlossiness","()","<p>Returns material expression or scalar value for glossiness.</p>"],["Mesh.prototype.setPositionOffset","Mesh","webgl-renderables/Mesh.html#setPositionOffset","(materialExpression)","<p>Defines 3 element map which displaces the position of each vertex in world\nspace.</p>"],["Mesh.prototype.getPositionOffset","Mesh","webgl-renderables/Mesh.html#getPositionOffset","()","<p>Returns position offset.</p>"],["Mesh.prototype.getMaterialExpressions","Mesh","webgl-renderables/Mesh.html#getMaterialExpressions","()","<p>Get the mesh's expressions</p>"],["Mesh.prototype.getValue","Mesh","webgl-renderables/Mesh.html#getValue","()","<p>Get the mesh's value</p>"],["Mesh.prototype._pushInvalidations","Mesh","webgl-renderables/Mesh.html#_pushInvalidations","(expressionName)","<p>Queues the invalidations for Mesh</p>"],["Mesh.prototype.onUpdate","Mesh","webgl-renderables/Mesh.html#onUpdate","()","<p>Sends draw commands to the renderer</p>"],["Mesh.prototype.onMount","Mesh","webgl-renderables/Mesh.html#onMount","(node, id)","<p>Save reference to node, set its ID and call draw on Mesh.</p>"],["Mesh.prototype.onDismount","Mesh","webgl-renderables/Mesh.html#onDismount","()","<p>Queues the command for dismounting Mesh</p>"],["Mesh.prototype.onShow","Mesh","webgl-renderables/Mesh.html#onShow","()","<p>Makes Mesh visible</p>"],["Mesh.prototype.onHide","Mesh","webgl-renderables/Mesh.html#onHide","()","<p>Makes Mesh hidden</p>"],["Mesh.prototype.onTransformChange","Mesh","webgl-renderables/Mesh.html#onTransformChange","(transform)","<p>Receives transform change updates from the scene graph.</p>"],["Mesh.prototype.onSizeChange","Mesh","webgl-renderables/Mesh.html#onSizeChange","(x, y, z)","<p>Receives size change updates from the scene graph.</p>"],["Mesh.prototype.onOpacityChange","Mesh","webgl-renderables/Mesh.html#onOpacityChange","(opacity)","<p>Receives opacity change updates from the scene graph.</p>"],["Mesh.prototype.onAddUIEvent","Mesh","webgl-renderables/Mesh.html#onAddUIEvent","(UIEvent)","<p>Adds functionality for UI events (TODO)</p>"],["Mesh.prototype._requestUpdate","Mesh","webgl-renderables/Mesh.html#_requestUpdate","()","<p>Queues instance to be updated.</p>"],["Mesh.prototype.init","Mesh","webgl-renderables/Mesh.html#init","()","<p>Initializes the mesh with appropriate listeners.</p>"],["Mesh.prototype.draw","Mesh","webgl-renderables/Mesh.html#draw","()","<p>Draws given Mesh's current state.</p>"],["AmbientLight","AmbientLight","webgl-renderables/lights/AmbientLight.html#AmbientLight","","<p>AmbientLight extends the functionality of Light. It sets the ambience in\nthe scene. Ambience is a light source that emits light in the entire\nscene, evenly.</p>"],["AmbientLight.prototype.constructor","AmbientLight","webgl-renderables/lights/AmbientLight.html#constructor","","<p>Sets AmbientLight as the constructor</p>"],["Light","Light","webgl-renderables/lights/Light.html#Light","","<p>The blueprint for all light components.</p>"],["Light.prototype._node","Light","webgl-renderables/lights/Light.html#_node","",""],["Light.prototype._requestingUpdate","Light","webgl-renderables/lights/Light.html#_requestingUpdate","",""],["Light.prototype._color","Light","webgl-renderables/lights/Light.html#_color","",""],["Light.prototype.queue","Light","webgl-renderables/lights/Light.html#queue","",""],["Light.prototype.commands","Light","webgl-renderables/lights/Light.html#commands","",""],["Light.prototype._id","Light","webgl-renderables/lights/Light.html#_id","",""],["Light.prototype.setColor","Light","webgl-renderables/lights/Light.html#setColor","(color)","<p>Changes the color of the light, using the 'Color' utility component.</p>"],["Light.prototype.getColor","Light","webgl-renderables/lights/Light.html#getColor","()","<p>Returns the current color.</p>"],["Light.prototype.onUpdate","Light","webgl-renderables/lights/Light.html#onUpdate","()","<p>Sends draw commands to the renderer</p>"],["PointLight","PointLight","webgl-renderables/lights/PointLight.html#PointLight","","<p>PointLight extends the functionality of Light. PointLight is a light source\nthat emits light in all directions from a point in space.</p>"],["PointLight.prototype.constructor","PointLight","webgl-renderables/lights/PointLight.html#constructor","","<p>Sets PointLight as the constructor</p>"],["PointLight.prototype.onMount","PointLight","webgl-renderables/lights/PointLight.html#onMount","(node, id)","<p>Receive the notice that the node you are on has been mounted.</p>"],["PointLight.prototype.onTransformChange","PointLight","webgl-renderables/lights/PointLight.html#onTransformChange","(transform)","<p>Receives transform change updates from the scene graph.</p>"],["Buffer","Buffer","webgl-renderers/Buffer.html#Buffer","","<p>Buffer is a private class that wraps the vertex data that defines\nthe the points of the triangles that webgl draws. Each buffer\nmaps to one attribute of a mesh.</p>"],["Buffer.prototype.buffer","Buffer","webgl-renderers/Buffer.html#buffer","",""],["Buffer.prototype.target","Buffer","webgl-renderers/Buffer.html#target","",""],["Buffer.prototype.type","Buffer","webgl-renderers/Buffer.html#type","",""],["Buffer.prototype.data","Buffer","webgl-renderers/Buffer.html#data","",""],["Buffer.prototype.gl","Buffer","webgl-renderers/Buffer.html#gl","",""],["Buffer.prototype.subData","Buffer","webgl-renderers/Buffer.html#subData","()","<p>Creates a WebGL buffer if one does not yet exist and binds the buffer to\nto the context. Runs bufferData with appropriate data.</p>"],["BufferRegistry","BufferRegistry","webgl-renderers/BufferRegistry.html#BufferRegistry","","<p>BufferRegistry is a class that manages allocation of buffers to\ninput geometries.</p>"],["BufferRegistry.prototype.gl","BufferRegistry","webgl-renderers/BufferRegistry.html#gl","",""],["BufferRegistry.prototype.registry","BufferRegistry","webgl-renderers/BufferRegistry.html#registry","",""],["BufferRegistry.prototype._dynamicBuffers","BufferRegistry","webgl-renderers/BufferRegistry.html#_dynamicBuffers","",""],["BufferRegistry.prototype._staticBuffers","BufferRegistry","webgl-renderers/BufferRegistry.html#_staticBuffers","",""],["BufferRegistry.prototype._arrayBufferMax","BufferRegistry","webgl-renderers/BufferRegistry.html#_arrayBufferMax","",""],["BufferRegistry.prototype._elementBufferMax","BufferRegistry","webgl-renderers/BufferRegistry.html#_elementBufferMax","",""],["BufferRegistry.prototype.allocate","BufferRegistry","webgl-renderers/BufferRegistry.html#allocate","(geometryId, name, value, spacing, dynamic)","<p>Binds and fills all the vertex data into webgl buffers.  Will reuse buffers if\npossible.  Populates registry with the name of the buffer, the WebGL buffer\nobject, spacing of the attribute, the attribute's offset within the buffer,\nand finally the length of the buffer.  This information is later accessed by\nthe root to draw the buffers.</p>"],["Program","Program","webgl-renderers/Program.html#Program","","<p>A class that handles interactions with the WebGL shader program\nused by a specific context.  It manages creation of the shader program\nand the attached vertex and fragment shaders.  It is also in charge of\npassing all uniforms to the WebGLContext.</p>"],["Program.prototype.gl","Program","webgl-renderers/Program.html#gl","",""],["Program.prototype.textureSlots","Program","webgl-renderers/Program.html#textureSlots","",""],["Program.prototype.options","Program","webgl-renderers/Program.html#options","",""],["Program.prototype.registeredMaterials","Program","webgl-renderers/Program.html#registeredMaterials","",""],["Program.prototype.flaggedUniforms","Program","webgl-renderers/Program.html#flaggedUniforms","",""],["Program.prototype.cachedUniforms","Program","webgl-renderers/Program.html#cachedUniforms","",""],["Program.prototype.uniformTypes","Program","webgl-renderers/Program.html#uniformTypes","",""],["Program.prototype.definitionVec4","Program","webgl-renderers/Program.html#definitionVec4","",""],["Program.prototype.definitionVec3","Program","webgl-renderers/Program.html#definitionVec3","",""],["Program.prototype.definitionFloat","Program","webgl-renderers/Program.html#definitionFloat","",""],["Program.prototype.applicationVec3","Program","webgl-renderers/Program.html#applicationVec3","",""],["Program.prototype.applicationVec4","Program","webgl-renderers/Program.html#applicationVec4","",""],["Program.prototype.applicationFloat","Program","webgl-renderers/Program.html#applicationFloat","",""],["Program.prototype.applicationVert","Program","webgl-renderers/Program.html#applicationVert","",""],["Program.prototype.definitionVert","Program","webgl-renderers/Program.html#definitionVert","",""],["Program.prototype.registerMaterial","Program","webgl-renderers/Program.html#registerMaterial","(name, material)","<p>Determines whether a material has already been registered to\nthe shader program.</p>"],["Program.prototype.resetProgram","Program","webgl-renderers/Program.html#resetProgram","()","<p>Clears all cached uniforms and attribute locations.  Assembles\nnew fragment and vertex shaders and based on material from\ncurrently registered materials.  Attaches said shaders to new\nshader program and upon success links program to the WebGL\ncontext.</p>"],["Program.prototype.uniformIsCached","Program","webgl-renderers/Program.html#uniformIsCached","(targetName, value)","<p>Compares the value of the input uniform value against\nthe cached value stored on the Program class.  Updates and\ncreates new entries in the cache when necessary.</p>"],["Program.prototype.setUniforms","Program","webgl-renderers/Program.html#setUniforms","(uniformNames, uniformValue)","<p>Handles all passing of uniforms to WebGL drawing context.  This\nfunction will find the uniform location and then, based on\na type inferred from the javascript value of the uniform, it will call\nthe appropriate function to pass the uniform to WebGL.  Finally,\nsetUniforms will iterate through the passed in shaderChunks (if any)\nand set the appropriate uniforms to specify which chunks to use.</p>"],["Program.prototype.getUniformTypeFromValue","Program","webgl-renderers/Program.html#getUniformTypeFromValue","(value)","<p>Infers uniform setter function to be called on the WebGL context, based\non an input value.</p>"],["Program.prototype.compileShader","Program","webgl-renderers/Program.html#compileShader","(shader, source)","<p>Adds shader source to shader and compiles the input shader.  Checks\ncompile status and logs error if necessary.</p>"],["Texture","Texture","webgl-renderers/Texture.html#Texture","","<p>Texture is a private class that stores image data\nto be accessed from a shader or used as a render target.</p>"],["Texture.prototype.id","Texture","webgl-renderers/Texture.html#id","",""],["Texture.prototype.width","Texture","webgl-renderers/Texture.html#width","",""],["Texture.prototype.height","Texture","webgl-renderers/Texture.html#height","",""],["Texture.prototype.mipmap","Texture","webgl-renderers/Texture.html#mipmap","",""],["Texture.prototype.format","Texture","webgl-renderers/Texture.html#format","",""],["Texture.prototype.type","Texture","webgl-renderers/Texture.html#type","",""],["Texture.prototype.gl","Texture","webgl-renderers/Texture.html#gl","",""],["Texture.prototype.bind","Texture","webgl-renderers/Texture.html#bind","()","<p>Binds this texture as the selected target.</p>"],["Texture.prototype.unbind","Texture","webgl-renderers/Texture.html#unbind","()","<p>Erases the texture data in the given texture slot.</p>"],["Texture.prototype.setImage","Texture","webgl-renderers/Texture.html#setImage","(img)","<p>Replaces the image data in the texture with the given image.</p>"],["Texture.prototype.setArray","Texture","webgl-renderers/Texture.html#setArray","(input)","<p>Replaces the image data in the texture with an array of arbitrary data.</p>"],["Texture.prototype.readBack","Texture","webgl-renderers/Texture.html#readBack","(x, y, width, height)","<p>Dumps the rgb-pixel contents of a texture into an array for debugging purposes</p>"],["TextureManager","TextureManager","webgl-renderers/TextureManager.html#TextureManager","","<p>Handles loading, binding, and resampling of textures for WebGLRenderer.</p>"],["TextureManager.prototype.registry","TextureManager","webgl-renderers/TextureManager.html#registry","",""],["TextureManager.prototype._needsResample","TextureManager","webgl-renderers/TextureManager.html#_needsResample","",""],["TextureManager.prototype._activeTexture","TextureManager","webgl-renderers/TextureManager.html#_activeTexture","",""],["TextureManager.prototype._boundTexture","TextureManager","webgl-renderers/TextureManager.html#_boundTexture","",""],["TextureManager.prototype._checkerboard","TextureManager","webgl-renderers/TextureManager.html#_checkerboard","",""],["TextureManager.prototype.gl","TextureManager","webgl-renderers/TextureManager.html#gl","",""],["TextureManager.prototype.update","TextureManager","webgl-renderers/TextureManager.html#update","(time)","<p>Update function used by WebGLRenderer to queue resamples on\nregistered textures.</p>"],["TextureManager.prototype.register","TextureManager","webgl-renderers/TextureManager.html#register","(input, slot)","<p>Creates a spec and creates a texture based on given texture data.\nHandles loading assets if necessary.</p>"],["TextureManager.prototype.bindTexture","TextureManager","webgl-renderers/TextureManager.html#bindTexture","(id)","<p>Sets active texture slot and binds target texture.  Also handles\nresampling when necessary.</p>"],["WebGLRenderer","WebGLRenderer","webgl-renderers/WebGLRenderer.html#WebGLRenderer","","<p>WebGLRenderer is a private class that manages all interactions with the WebGL\nAPI. Each frame it receives commands from the compositor and updates its\nregistries accordingly. Subsequently, the draw function is called and the\nWebGLRenderer issues draw calls for all meshes in its registry.</p>"],["WebGLRenderer.prototype.canvas","WebGLRenderer","webgl-renderers/WebGLRenderer.html#canvas","",""],["WebGLRenderer.prototype.compositor","WebGLRenderer","webgl-renderers/WebGLRenderer.html#compositor","",""],["WebGLRenderer.prototype.gl","WebGLRenderer","webgl-renderers/WebGLRenderer.html#gl","",""],["WebGLRenderer.prototype.meshRegistry","WebGLRenderer","webgl-renderers/WebGLRenderer.html#meshRegistry","",""],["WebGLRenderer.prototype.meshRegistryKeys","WebGLRenderer","webgl-renderers/WebGLRenderer.html#meshRegistryKeys","",""],["WebGLRenderer.prototype.cutoutRegistry","WebGLRenderer","webgl-renderers/WebGLRenderer.html#cutoutRegistry","",""],["WebGLRenderer.prototype.cutoutRegistryKeys","WebGLRenderer","webgl-renderers/WebGLRenderer.html#cutoutRegistryKeys","",""],["WebGLRenderer.prototype.numLights","WebGLRenderer","webgl-renderers/WebGLRenderer.html#numLights","","<p>Lights</p>"],["WebGLRenderer.prototype.ambientLightColor","WebGLRenderer","webgl-renderers/WebGLRenderer.html#ambientLightColor","",""],["WebGLRenderer.prototype.lightRegistry","WebGLRenderer","webgl-renderers/WebGLRenderer.html#lightRegistry","",""],["WebGLRenderer.prototype.lightRegistryKeys","WebGLRenderer","webgl-renderers/WebGLRenderer.html#lightRegistryKeys","",""],["WebGLRenderer.prototype.lightPositions","WebGLRenderer","webgl-renderers/WebGLRenderer.html#lightPositions","",""],["WebGLRenderer.prototype.lightColors","WebGLRenderer","webgl-renderers/WebGLRenderer.html#lightColors","",""],["WebGLRenderer.prototype.textureManager","WebGLRenderer","webgl-renderers/WebGLRenderer.html#textureManager","",""],["WebGLRenderer.prototype.texCache","WebGLRenderer","webgl-renderers/WebGLRenderer.html#texCache","",""],["WebGLRenderer.prototype.bufferRegistry","WebGLRenderer","webgl-renderers/WebGLRenderer.html#bufferRegistry","",""],["WebGLRenderer.prototype.program","WebGLRenderer","webgl-renderers/WebGLRenderer.html#program","",""],["WebGLRenderer.prototype.state","WebGLRenderer","webgl-renderers/WebGLRenderer.html#state","",""],["WebGLRenderer.prototype.resolutionName","WebGLRenderer","webgl-renderers/WebGLRenderer.html#resolutionName","",""],["WebGLRenderer.prototype.resolutionValues","WebGLRenderer","webgl-renderers/WebGLRenderer.html#resolutionValues","",""],["WebGLRenderer.prototype.cachedSize","WebGLRenderer","webgl-renderers/WebGLRenderer.html#cachedSize","",""],["WebGLRenderer.prototype.projectionTransform","WebGLRenderer","webgl-renderers/WebGLRenderer.html#projectionTransform","",""],["WebGLRenderer.prototype.cutoutGeometry","WebGLRenderer","webgl-renderers/WebGLRenderer.html#cutoutGeometry","",""],["WebGLRenderer.prototype.getWebGLContext","WebGLRenderer","webgl-renderers/WebGLRenderer.html#getWebGLContext","(canvas)","<p>Attempts to retreive the WebGLRenderer context using several\naccessors. For browser compatability. Throws on error.</p>"],["WebGLRenderer.prototype.createLight","WebGLRenderer","webgl-renderers/WebGLRenderer.html#createLight","(path)","<p>Adds a new base spec to the light registry at a given path.</p>"],["WebGLRenderer.prototype.createMesh","WebGLRenderer","webgl-renderers/WebGLRenderer.html#createMesh","(path)","<p>Adds a new base spec to the mesh registry at a given path.</p>"],["WebGLRenderer.prototype.setCutoutState","WebGLRenderer","webgl-renderers/WebGLRenderer.html#setCutoutState","(path, usesCutout)","<p>Sets flag on indicating whether to do skip draw phase for\ncutout mesh at given path.</p>"],["WebGLRenderer.prototype.getOrSetCutout","WebGLRenderer","webgl-renderers/WebGLRenderer.html#getOrSetCutout","(path)","<p>Creates or retreives cutout</p>"],["WebGLRenderer.prototype.setMeshVisibility","WebGLRenderer","webgl-renderers/WebGLRenderer.html#setMeshVisibility","(path, visibility)","<p>Sets flag on indicating whether to do skip draw phase for\nmesh at given path.</p>"],["WebGLRenderer.prototype.removeMesh","WebGLRenderer","webgl-renderers/WebGLRenderer.html#removeMesh","(path)","<p>Deletes a mesh from the meshRegistry.</p>"],["WebGLRenderer.prototype.setCutoutUniform","WebGLRenderer","webgl-renderers/WebGLRenderer.html#setCutoutUniform","(path, uniformName, uniformValue)","<p>Creates or retreives cutout</p>"],["WebGLRenderer.prototype.setMeshOptions","WebGLRenderer","webgl-renderers/WebGLRenderer.html#setMeshOptions","(path, options)","<p>Edits the options field on a mesh</p>"],["WebGLRenderer.prototype.setAmbientLightColor","WebGLRenderer","webgl-renderers/WebGLRenderer.html#setAmbientLightColor","(path, r, g, b)","<p>Changes the color of the fixed intensity lighting in the scene</p>"],["WebGLRenderer.prototype.setLightPosition","WebGLRenderer","webgl-renderers/WebGLRenderer.html#setLightPosition","(path, x, y, z)","<p>Changes the location of the light in the scene</p>"],["WebGLRenderer.prototype.setLightColor","WebGLRenderer","webgl-renderers/WebGLRenderer.html#setLightColor","(path, r, g, b)","<p>Changes the color of a dynamic intensity lighting in the scene</p>"],["WebGLRenderer.prototype.handleMaterialInput","WebGLRenderer","webgl-renderers/WebGLRenderer.html#handleMaterialInput","(path, name, material)","<p>Compiles material spec into program shader</p>"],["WebGLRenderer.prototype.setGeometry","WebGLRenderer","webgl-renderers/WebGLRenderer.html#setGeometry","(path, geometry, drawType, dynamic)","<p>Changes the geometry data of a mesh</p>"],["WebGLRenderer.prototype.setMeshUniform","WebGLRenderer","webgl-renderers/WebGLRenderer.html#setMeshUniform","(path, uniformName, uniformValue)","<p>Uploads a new value for the uniform data when the mesh is being drawn</p>"],["WebGLRenderer.prototype.bufferData","WebGLRenderer","webgl-renderers/WebGLRenderer.html#bufferData","(path, geometryId, bufferName, bufferValue, bufferSpacing, isDynamic)","<p>Triggers the 'draw' phase of the WebGLRenderer. Iterates through registries\nto set uniforms, set attributes and issue draw commands for renderables.</p>"],["WebGLRenderer.prototype.draw","WebGLRenderer","webgl-renderers/WebGLRenderer.html#draw","(renderState)","<p>Triggers the 'draw' phase of the WebGLRenderer. Iterates through registries\nto set uniforms, set attributes and issue draw commands for renderables.</p>"],["WebGLRenderer.prototype.drawMeshes","WebGLRenderer","webgl-renderers/WebGLRenderer.html#drawMeshes","()","<p>Iterates through and draws all registered meshes. This includes\nbinding textures, handling draw options, setting mesh uniforms\nand drawing mesh buffers.</p>"],["WebGLRenderer.prototype.drawCutouts","WebGLRenderer","webgl-renderers/WebGLRenderer.html#drawCutouts","()","<p>Iterates through and draws all registered cutout meshes. Blending\nis disabled, cutout uniforms are set and finally buffers are drawn.</p>"],["WebGLRenderer.prototype.setGlobalUniforms","WebGLRenderer","webgl-renderers/WebGLRenderer.html#setGlobalUniforms","(renderState)","<p>Sets uniforms to be shared by all meshes.</p>"],["WebGLRenderer.prototype.drawBuffers","WebGLRenderer","webgl-renderers/WebGLRenderer.html#drawBuffers","(vertexBuffers, mode, id)","<p>Loads the buffers and issues the draw command for a geometry.</p>"],["WebGLRenderer.prototype.updateSize","WebGLRenderer","webgl-renderers/WebGLRenderer.html#updateSize","(size)","<p>Updates the width and height of parent canvas, sets the viewport size on\nthe WebGL context and updates the resolution uniform for the shader program.\nSize is retreived from the container object of the renderer.</p>"],["WebGLRenderer.prototype.handleOptions","WebGLRenderer","webgl-renderers/WebGLRenderer.html#handleOptions","(options, mesh)","<p>Updates the state of the WebGL drawing context based on custom parameters\ndefined on a mesh.</p>"],["WebGLRenderer.prototype.resetOptions","WebGLRenderer","webgl-renderers/WebGLRenderer.html#resetOptions","(options)","<p>Resets the state of the WebGL drawing context to default values.</p>"]]}};